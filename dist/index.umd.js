(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.CryptoKittyGenerator = {}));
})(this, (function (exports) { 'use strict';

    class SeededRandom {
        constructor(seed) {
            this.seed = typeof seed === 'string' ? this.hashString(seed) : seed;
        }
        hashString(str) {
            let hash = 0;
            for (let i = 0; i < str.length; i++) {
                const char = str.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash = hash & hash; // Convert to 32bit integer
            }
            return Math.abs(hash);
        }
        /**
         * Returns a pseudo-random number between 0 and 1
         */
        random() {
            this.seed = (this.seed * 9301 + 49297) % 233280;
            return this.seed / 233280;
        }
        /**
         * Returns a random integer between min (inclusive) and max (exclusive)
         */
        randomInt(min, max) {
            return Math.floor(this.random() * (max - min)) + min;
        }
        /**
         * Returns a random element from an array
         */
        randomChoice(array) {
            return array[this.randomInt(0, array.length)];
        }
        /**
         * Returns a random float between min and max
         */
        randomFloat(min, max) {
            return this.random() * (max - min) + min;
        }
        /**
         * Returns true with the given probability (0-1)
         */
        randomBool(probability = 0.5) {
            return this.random() < probability;
        }
    }

    const DEFAULT_CAT_TRAITS = {
        colors: [
            // Classic cat colors
            '#D2691E', // Saddle Brown (Orange tabby)
            '#8B4513', // Saddle Brown (Brown tabby)
            '#2F4F4F', // Dark Slate Gray (Gray)
            '#000000', // Black
            '#FFFFFF', // White
            '#F5DEB3', // Wheat (Cream)
            '#DEB887', // Burlywood (Light brown)
            '#C0C0C0', // Silver
            '#778899', // Light Slate Gray
            '#A0522D', // Sienna (Dark brown)
            // Modern/cute colors inspired by Fat Cat Avatar
            '#FFB6C1', // Light Pink
            '#87CEEB', // Sky Blue
            '#98FB98', // Pale Green
            '#DDA0DD', // Plum (Lavender)
            '#F0E68C', // Khaki (Pale yellow)
            '#FFA07A', // Light Salmon
            '#20B2AA', // Light Sea Green
            '#FFE4E1', // Misty Rose
            '#F0F8FF', // Alice Blue
            '#F5F5DC', // Beige
            '#E6E6FA', // Lavender
            '#FFF8DC', // Cornsilk
            '#FFE4B5', // Moccasin
            '#FFEFD5', // Papaya Whip
            '#F0FFFF', // Azure
            '#F5FFFA', // Mint Cream
        ],
        furPatterns: [
            'solid',
            'stripes',
            'spots',
            'calico',
            'tuxedo',
            'tabby',
            'tortoiseshell',
            'bicolor',
            'colorpoint',
            'mackerel',
            'classic',
            'ticked',
            'rosette',
            'marble',
            'van',
            'harlequin',
            'gradient',
            'ombre',
            'patches',
            'swirl',
        ],
        eyeShapes: [
            'round',
            'almond',
            'oval',
            'wide',
            'narrow',
            'upturned',
            'downturned',
            'sleepy',
            'alert',
            'mysterious',
            'bright',
            'gentle',
            'fierce',
            'curious',
            'wise',
            'playful',
            'sparkly',
            'dreamy',
            'mischievous',
            'loving',
        ],
        mouths: [
            'smile',
            'neutral',
            'open',
            'tongue',
            'whiskers',
            'small',
            'wide',
            'cute',
            'serious',
            'playful',
            'surprised',
            'sleepy',
            'content',
            'mischievous',
            'blep',
            'yawn',
            'meow',
            'purr',
        ],
        accessories: [
            'none',
            'bow-tie',
            'hat',
            'glasses',
            'crown',
            '1st-place-medal',
            'adhesive-bandage',
            'scarf',
            'flower',
            'necklace',
            'mask',
            'bowtie',
            'ribbon',
            'mask',
            'headband',
            'bow',
            'charm',
            'brooch',
        ],
    };
    const RARITY_WEIGHTS = {
        common: 0.3,
        uncommon: 0.25,
        rare: 0.2,
        legendary: 0.2,
        mythical: 0.1,
    };
    const TRAIT_RARITIES = {
        colors: {
            common: ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD'],
            uncommon: ['#FFA07A', '#87CEEB', '#F0E68C', '#FFB6C1'],
            rare: ['#D2691E', '#708090', '#000000', '#FFFFFF'],
            legendary: ['#8B4513', '#FF69B4'],
            mythical: [],
        },
        furPatterns: {
            common: ['solid', 'stripes', 'spots', 'tabby'],
            uncommon: ['calico', 'tuxedo', 'tortoiseshell', 'bicolor'],
            rare: ['colorpoint', 'mackerel', 'classic', 'ticked'],
            legendary: ['rosette', 'marble', 'van'],
            mythical: ['harlequin'],
        },
        eyeShapes: {
            common: ['round', 'almond', 'oval', 'wide'],
            uncommon: ['narrow', 'upturned', 'downturned', 'sleepy'],
            rare: ['alert', 'mysterious', 'bright', 'gentle'],
            legendary: ['fierce', 'curious', 'wise'],
            mythical: ['playful'],
        },
        mouths: {
            common: ['smile', 'cute', 'neutral', 'playful'],
            uncommon: ['tongue', 'whiskers', 'small', 'wide'],
            rare: ['serious', 'surprised', 'open'],
            legendary: ['sleepy', 'content', 'mischievous'],
            mythical: ['blep'],
        },
        accessories: {
            common: ['none', 'scarf', 'bow-tie', 'glasses', 'adhesive-bandage'],
            uncommon: ['hat', 'flower', 'necklace', 'bowtie', 'ribbon'],
            rare: ['crown', '1st-place-medal', 'mask'],
            legendary: ['mask', 'crown', '1st-place-medal', 'mask'],
            mythical: ['mask'],
        },
    };

    // Auto-generated file - do not edit manually
    // Generated from SVG assets in the assets/ directory
    const EMBEDDED_ASSETS = {
        '1st-place-medal': {
            content: `<path fill="#55ACEE" d="M18 8l-7-8H0l14 17l11.521-4.75z"></path><path fill="#3B88C3" d="M25 0l-7 8l5.39 7.312l1.227-1.489L36 0z"></path><path fill="#FFAC33" d="M23.205 16.026c.08-.217.131-.448.131-.693a2 2 0 0 0-2-2h-6.667a2 2 0 0 0-2 2c0 .245.05.476.131.693c-3.258 1.826-5.464 5.307-5.464 9.307C7.335 31.224 12.111 36 18.002 36s10.667-4.776 10.667-10.667c0-4-2.206-7.481-5.464-9.307z"></path><path fill="#9E5200" d="M19.404 18.6h-1.721l-2.73 2.132a.528.528 0 0 0-.112.28v1.178c0 .186.15.354.337.354h1.795v8.414c0 .188.15.355.355.355h2.076c.186 0 .336-.168.336-.355V18.954c0-.186-.149-.354-.336-.354z"></path>`,
            viewBox: '0 0 36 36'
        },
        'adhesive-bandage': {
            content: `<path fill="#D99E82" d="M2.92 21.393L21.393 2.92A8.264 8.264 0 0 1 33.08 14.607L14.607 33.08A8.264 8.264 0 0 1 2.92 21.393z"> </path> <g fill="#C1694F"> <circle cx="4.389" cy="25.778" r=".972"> </circle> <circle cx="7.306" cy="28.694" r=".972"> </circle> <circle cx="10.222" cy="31.611" r=".972"> </circle> <circle cx="7.306" cy="22.861" r=".972"> </circle> <circle cx="10.222" cy="25.778" r=".972"> </circle> <circle cx="13.139" cy="28.694" r=".972"> </circle> <path d="M21.896 7.189a.972.972 0 1 1 1.93.232a.972.972 0 0 1-1.93-.232z"> </path> <circle cx="25.778" cy="10.222" r=".972"> </circle> <circle cx="28.694" cy="13.139" r=".972"> </circle> <circle cx="25.778" cy="4.389" r=".972"> </circle> <circle cx="28.694" cy="7.306" r=".972"> </circle> <circle cx="31.611" cy="10.222" r=".972"> </circle> </g> <path fill="#EABAA7" d="M6.82 17.514L17.512 6.819L29.18 18.486L18.486 29.18z"> </path> <path fill="#F7DED5" d="M9.799 18.423a.972.972 0 0 1-.687-1.66l7.715-7.715a.972.972 0 1 1 1.375 1.375l-7.715 7.715a.967.967 0 0 1-.688.285z"> </path>`,
            viewBox: '0 0 36 36'
        },
        'bow-tie': {
            content: `<defs id="defs7" /> <polygon style="fill:#C60024;" points="199.659,239.051 36.08,183.143 36.08,356.974 36.08,378.39 220.229,315.453 220.229,246.081 " id="polygon1" /> <g id="g3"> <rect x="220.231" y="246.079" style="fill:#A50020;" width="71.544" height="69.376" id="rect1" /> <rect x="475.918" y="246.079" style="fill:#A50020;" width="28.444" height="69.376" id="rect2" /> <rect x="7.635" y="246.079" style="fill:#A50020;" width="28.445" height="69.376" id="rect3" /> </g> <polygon style="fill:#C60024;" points="475.92,378.39 291.771,315.453 291.771,246.081 475.92,183.143 " id="polygon3" /> <g id="g5"> <polygon style="fill:#A50020;" points="199.659,239.051 199.659,301.066 36.08,356.974 36.08,378.39 220.229,315.453 220.229,246.081 " id="polygon4" /> <polygon style="fill:#A50020;" points="312.341,239.051 312.341,301.066 475.92,356.974 475.92,378.39 291.771,315.453 291.771,246.081 " id="polygon5" /> </g> <path d="M483.556,172.465l-193.051,65.98h-69.008l-193.051-65.98v65.98H0v84.642h28.445v65.98l193.051-65.98h69.008l193.051,65.98 v-65.98H512v-84.642h-28.444V172.465z M28.445,307.818H15.27v-54.103h13.175C28.445,253.716,28.445,307.818,28.445,307.818z M212.594,262.264l-83.33-12.231l-2.217,15.109l85.547,12.556v9.724l-49.134,6.357l1.959,15.145l47.175-6.104v7.176L43.714,367.713 v-44.624v-84.642v-44.624l168.879,57.718V262.264z M284.137,307.818h-56.273v-54.103h56.273V307.818z M468.286,238.446v84.642 v44.624l-168.879-57.718v-7.176l47.175,6.104l1.959-15.145l-49.134-6.357v-9.724l85.547-12.556l-2.217-15.109l-83.33,12.231V251.54 l168.879-57.718L468.286,238.446L468.286,238.446z M496.73,253.716v54.103h-13.175v-54.103H496.73z" id="path7" />`,
            viewBox: '0 0 512 512'
        },
        'crown': {
            content: `<path fill="#F4900C" d="M14.174 17.075L6.75 7.594l-3.722 9.481z"></path><path fill="#F4900C" d="M17.938 5.534l-6.563 12.389H24.5z"></path><path fill="#F4900C" d="M21.826 17.075l7.424-9.481l3.722 9.481z"></path><path fill="#FFCC4D" d="M28.669 15.19L23.887 3.523l-5.88 11.668l-.007.003l-.007-.004l-5.88-11.668L7.331 15.19C4.197 10.833 1.28 8.042 1.28 8.042S3 20.75 3 33h30c0-12.25 1.72-24.958 1.72-24.958s-2.917 2.791-6.051 7.148z"></path><circle fill="#5C913B" cx="17.957" cy="22" r="3.688"></circle><circle fill="#981CEB" cx="26.463" cy="22" r="2.412"></circle><circle fill="#DD2E44" cx="32.852" cy="22" r="1.986"></circle><circle fill="#981CEB" cx="9.45" cy="22" r="2.412"></circle><circle fill="#DD2E44" cx="3.061" cy="22" r="1.986"></circle><path fill="#FFAC33" d="M33 34H3a1 1 0 1 1 0-2h30a1 1 0 1 1 0 2zm0-3.486H3a1 1 0 1 1 0-2h30a1 1 0 1 1 0 2z"></path><circle fill="#FFCC4D" cx="1.447" cy="8.042" r="1.407"></circle><circle fill="#F4900C" cx="6.75" cy="7.594" r="1.192"></circle><circle fill="#FFCC4D" cx="12.113" cy="3.523" r="1.784"></circle><circle fill="#FFCC4D" cx="34.553" cy="8.042" r="1.407"></circle><circle fill="#F4900C" cx="29.25" cy="7.594" r="1.192"></circle><circle fill="#FFCC4D" cx="23.887" cy="3.523" r="1.784"></circle><circle fill="#F4900C" cx="17.938" cy="5.534" r="1.784"></circle>`,
            viewBox: '0 0 36 36'
        },
        'glasses': {
            content: `<path d="M399.376 511.864c0-79.101-64.112-143.227-143.196-143.227s-143.196 64.125-143.196 143.227c0 79.101 64.112 143.227 143.196 143.227s143.196-64.125 143.196-143.227zm40.96 0c0 101.721-82.448 184.187-184.156 184.187S72.024 613.585 72.024 511.864c0-101.721 82.448-184.187 184.156-184.187s184.156 82.466 184.156 184.187zm470.678 0c0-79.101-64.112-143.227-143.196-143.227s-143.196 64.125-143.196 143.227c0 79.101 64.112 143.227 143.196 143.227s143.196-64.125 143.196-143.227zm40.96 0c0 101.721-82.448 184.187-184.156 184.187s-184.156-82.466-184.156-184.187c0-101.721 82.448-184.187 184.156-184.187s184.156 82.466 184.156 184.187z"/><path d="M446.887 528.78c19.498-9.621 40.989-14.69 63.253-14.69 28.951 0 56.584 8.596 80.052 24.447 9.373 6.331 22.104 3.865 28.434-5.509s3.865-22.104-5.509-28.434c-30.185-20.388-65.79-31.464-102.978-31.464-28.584 0-56.273 6.531-81.377 18.918-10.143 5.005-14.309 17.285-9.304 27.428s17.285 14.309 27.428 9.304zM51.2 590.025c-28.278 0-51.2-22.922-51.2-51.2v-63.416c0-28.278 22.922-51.2 51.2-51.2h10.588c28.278 0 51.2 22.922 51.2 51.2v63.416c0 28.278-22.922 51.2-51.2 51.2H51.2zm0-40.96h10.588c5.657 0 10.24-4.583 10.24-10.24v-63.416c0-5.657-4.583-10.24-10.24-10.24H51.2a10.238 10.238 0 00-10.24 10.24v63.416c0 5.657 4.583 10.24 10.24 10.24zm911.014 40.96c-28.278 0-51.2-22.922-51.2-51.2v-63.416c0-28.278 22.922-51.2 51.2-51.2h10.588c28.278 0 51.2 22.922 51.2 51.2v63.416c0 28.278-22.922 51.2-51.2 51.2h-10.588zm0-40.96h10.588c5.657 0 10.24-4.583 10.24-10.24v-63.416c0-5.657-4.583-10.24-10.24-10.24h-10.588a10.238 10.238 0 00-10.24 10.24v63.416c0 5.657 4.583 10.24 10.24 10.24z"/>`,
            viewBox: '0 0 1024 1024'
        },
        'hat': {
            content: `<path d="M944.700821 796.172708c24.616153 0 44.532859 21.930755 44.532859 48.912616s-19.916706 48.880647-44.532859 48.880646H76.358028c-24.616153 0-44.532859-21.898786-44.532859-48.880646 0-13.490931 4.987169-25.735069 13.043365-34.558522 8.056196-8.88739 19.181418-14.354094 31.489494-14.354094h868.342793z" fill="#FF4893" /><path d="M873.282008 306.055509c25.351441 7.608629 43.989385 27.045799 51.885736 50.351222-19.43717 15.089382-45.683744 21.067591-71.035185 13.458962-25.415379-7.640598-44.053323-27.109737-51.949674-50.415161 19.43717-15.089382 45.683744-21.067591 71.099123-13.395023z" fill="#5FCEFF" /><path d="M890.67316 714.651681v81.521027H115.967656v-145.491056c129.154881 0 129.154881 63.970029 258.245825 63.970029s129.090943-63.970029 258.245824-63.970029c129.090943 0 129.090943 63.970029 258.213855 63.970029z" fill="#FFB578" /><path d="M890.67316 632.139615v82.512066c-129.122912 0-129.122912-63.970029-258.213855-63.970029-129.154881 0-129.154881 63.970029-258.245824 63.970029s-129.090943-63.970029-258.245825-63.970029v-50.511067c0-10.773563 0.351659-21.451219 1.086947-32.032968 128.067934 0.351659 128.419594 64.001998 257.158878 64.001998 129.090943 0 129.090943-64.001998 258.245824-64.001998 129.090943 0 129.090943 64.001998 258.213855 64.001998z" fill="#8B87C1" /><path d="M857.105679 122.840998c23.049671 29.699229 32.192813 69.756423 20.524117 108.534857-11.636727 38.746464-41.303987 67.134963-76.885517 79.251225-23.049671-29.699229-32.128875-69.788392-20.524117-108.534857 11.668696-38.682526 41.303987-67.166932 76.885517-79.251225zM763.660204 340.198433c15.089382 19.469139 21.067591 45.715713 13.395024 71.131092-7.608629 25.319472-27.045799 43.957416-50.383192 51.917704-15.057413-19.501108-21.067591-45.747682-13.426992-71.099122 7.608629-25.415379 27.045799-43.989385 50.41516-51.949674z" fill="#5FCEFF" /><path d="M648.507758 354.680403c38.746464 11.636727 78.803659 2.525553 108.534857-20.556086-12.116262-35.58153-40.504761-65.216821-79.283194-76.885517-38.714495-11.604758-78.803659-2.525553-108.502888 20.524117 12.116262 35.58153 40.568699 65.24879 79.251225 76.917486z m115.152446-14.48197c-23.369361 7.960288-42.806531 26.534295-50.41516 51.949674-7.640598 25.351441-1.630421 51.598014 13.426992 71.099122 23.337392-7.960288 42.774562-26.598233 50.383192-51.917704 7.672567-25.415379 1.694359-51.661952-13.395024-71.131092z m127.012956 259.972152v31.96903c-129.122912 0-129.122912-64.001998-258.213855-64.001998-129.154881 0-129.154881 64.001998-258.245824 64.001998-128.739284 0-129.090943-63.650339-257.158878-64.001998 14.897568-220.010864 182.159533-393.378914 386.249821-393.378914 106.968374 0 203.802566 47.601886 273.910649 124.583309s113.458087 183.342387 113.458087 300.828573z" fill="#FFB578" /><path d="M757.042615 334.124317c-29.731198 23.08164-69.788392 32.192813-108.534857 20.556086-38.682526-11.668696-67.134963-41.335956-79.251225-76.917486 29.699229-23.049671 69.788392-32.128875 108.502888-20.524117 38.778433 11.668696 67.166932 41.303987 79.283194 76.885517z" fill="#5FCEFF" /><path d="M890.67316 818.551029a22.378321 22.378321 0 0 1-22.378321-22.378321v-196.002123c0-108.068109-38.222172-209.550598-107.626936-285.761569-68.870881-75.625937-160.273535-117.27519-257.363479-117.275189-189.92481 0-349.776354 163.627086-363.92265 372.509531a442.65278 442.65278 0 0 0-1.035797 30.52403v196.002123a22.378321 22.378321 0 1 1-44.756642 0v-196.002123c0-11.393762 0.383628-22.694814 1.138098-33.586663 7.589448-112.035466 53.222041-216.203353 128.493122-293.277488 76.15982-77.982055 175.631457-120.92925 280.080672-120.929249 109.845587 0 212.996859 46.841023 290.457819 131.894627 76.927077 84.468571 119.289239 196.657488 119.289238 315.895576v196.002123a22.375124 22.375124 0 0 1-22.375124 22.384715z" fill="#4F46A3" /><path d="M944.700821 916.344291H76.358028c-36.895458 0-66.91118-31.965833-66.91118-71.258967 0-18.67311 6.710299-36.30403 18.896894-49.647904 12.630964-13.9353 29.702426-21.64623 48.014286-21.64623h868.342793c36.895458 0 66.914377 31.981818 66.914377 71.294134-0.003197 39.293135-30.018919 71.258968-66.914377 71.258967z m-868.342793-97.793262c-5.521051 0-10.815123 2.487191-14.910355 7.004414-4.625919 5.063894-7.247379 12.164216-7.24738 19.529881 0 14.613044 9.939171 26.502326 22.154538 26.502325h868.342793c12.215366 0 22.157735-11.889282 22.157735-26.502325 0-14.632225-9.939171-26.537492-22.157735-26.537492H76.358028zM890.67316 654.517936c-69.810771 0-105.018264-17.45509-139.06528-34.331542-30.779782-15.258818-59.852418-29.670457-119.151772-29.670456-59.34411 0-88.426337 14.418033-119.218907 29.680047-34.04382 16.873254-69.244919 34.321951-139.02372 34.321951-69.785196 0-104.986295-17.451893-139.030115-34.325148-30.619937-15.178895-59.539121-29.513808-118.189504-29.67685h-1.026206a22.378321 22.378321 0 1 1 0-44.756642h1.086947c69.133027 0.191814 104.145509 17.547801 138.007106 34.331541 30.776585 15.258818 59.852418 29.670457 119.151772 29.670457 59.296157 0 88.368793-14.411639 119.148575-29.66726 34.053411-16.879648 69.270494-34.334738 139.097249-34.334738 69.781999 0 104.986295 17.451893 139.026918 34.325147 30.786176 15.262015 59.865206 29.676851 119.186937 29.676851a22.378321 22.378321 0 1 1 0 44.756642z" fill="#4F46A3" /><path d="M890.67316 737.030002c-69.807574 0-105.015067-17.4455-139.062083-34.31236-30.779782-15.252424-59.852418-29.654472-119.151772-29.654472-59.34411 0-88.429534 14.408442-119.222104 29.664063-34.04382 16.863663-69.244919 34.302769-139.020523 34.302769s-104.976704-17.439106-139.020524-34.302769c-30.79257-15.255621-59.877993-29.664063-119.222104-29.664063a22.378321 22.378321 0 1 1 0-44.756642c69.823558 0 105.037445 17.4455 139.094053 34.315557 30.779782 15.249227 59.855615 29.651275 119.151771 29.651275s88.37199-14.405245 119.151772-29.651275c34.053411-16.870057 69.267297-34.315557 139.094053-34.315557 69.781999 0 104.983098 17.442303 139.023721 34.305966 30.786176 15.252424 59.865206 29.660866 119.190134 29.660866a22.378321 22.378321 0 1 1-0.006394 44.756642zM682.804133 382.116225h-0.006393c-13.769061 0-27.467791-2.020443-40.725348-6.000587-43.947826-13.25436-79.075396-47.323755-93.995342-91.137311a22.378321 22.378321 0 0 1 7.461572-24.891087c25.146839-19.517093 56.383778-30.265081 87.949998-30.26508 13.759471 0 27.451806 2.014049 40.696576 5.984602 43.973401 13.228785 79.123349 47.288589 94.043295 91.108539a22.378321 22.378321 0 0 1-7.458375 24.891087c-25.185202 19.542668-56.425338 30.309837-87.965983 30.309837z m-85.494776-95.939059c12.308077 22.534969 32.969661 39.62881 57.662539 47.077593a96.690331 96.690331 0 0 0 27.825844 4.101627h0.006393c16.022878 0 31.953045-4.063264 46.192052-11.639924-12.311273-22.531772-32.976054-39.616022-57.684918-47.048821-24.488277-7.340089-51.441366-4.46927-74.00191 7.509525z" fill="#4F46A3" /><path d="M726.675233 485.62555a22.378321 22.378321 0 0 1-17.717236-8.705167c-20.102126-26.038775-26.511917-60.143336-17.138597-91.236414 9.315775-31.121851 33.481165-56.064088 64.622197-66.671412a22.378321 22.378321 0 0 1 24.903875 7.471162c20.143686 25.984428 26.547083 60.120958 17.132203 91.306746-9.347744 31.105866-33.493953 56.025725-64.580638 66.63305a22.250445 22.250445 0 0 1-7.221804 1.202035z m28.049627-115.692722c-9.491605 7.157866-16.59832 17.141794-20.041385 28.63466-3.462246 11.480079-3.033861 23.717823 0.933496 34.922968 9.462833-7.154669 16.559958-17.125809 20.006219-28.599494a56.169586 56.169586 0 0 0-0.89833-34.958134zM800.747476 333.005401a22.384715 22.384715 0 0 1-17.682071-8.657213c-28.385302-36.57257-37.464506-84.67637-24.283675-128.675346 13.276738-44.014961 47.33974-79.148924 91.12772-94.020917a22.387912 22.387912 0 0 1 24.875102 7.467965c28.426861 36.626918 37.499672 84.740308 24.274085 128.704118-13.187225 43.915857-47.243833 79.056214-91.102145 93.985751a22.355943 22.355943 0 0 1-7.209016 1.195642z m47.943954-182.124367c-22.509394 12.285698-39.590447 32.950479-47.045624 57.675327-7.397634 24.699273-4.523618 51.351853 7.512722 74.024289 22.547757-12.308077 39.62881-32.96007 47.03923-57.636964 7.432799-24.708863 4.555587-51.367837-7.506328-74.062652z" fill="#4F46A3" /><path d="M876.546046 395.546414c-9.753751 0-19.459549-1.429016-28.845656-4.245487-31.236939-9.392501-56.169586-33.564285-66.712972-64.666954a22.378321 22.378321 0 0 1 7.471163-24.859117c17.809947-13.826605 39.922925-21.441628 62.269276-21.441629 9.811295 0 19.574637 1.448197 29.021486 4.299835 31.16341 9.350941 56.080072 33.500347 66.617065 64.590228a22.378321 22.378321 0 0 1-7.47436 24.859118c-17.829128 13.839393-39.970878 21.464007-62.346002 21.464006z m-44.654341-67.170129a56.291068 56.291068 0 0 0 28.682614 20.060567c11.393762 3.423883 23.724217 3.033861 34.881408-0.946283a56.089663 56.089663 0 0 0-28.605888-19.996629 55.936212 55.936212 0 0 0-34.958134 0.882345z" fill="#4F46A3" />`,
            viewBox: '0 0 1024 1024'
        },
        'mask': {
            content: `<defs> <mask id="eyeHolesMask"> <!-- White area will be visible, black areas will be transparent --> <rect width="48" height="48" fill="white"/> <!-- Black ellipses create transparent holes for eyes --> <ellipse cx="18" cy="22" rx="3" ry="4" fill="black"/> <ellipse cx="30" cy="22" rx="3" ry="4" fill="black"/> <!-- Black ellipse creates transparent hole for mouth --> <ellipse cx="24" cy="32" rx="4" ry="3" fill="black"/> </mask> </defs> <g> <!-- Apply mask to create eye holes --> <g mask="url(#eyeHolesMask)"> <ellipse style="fill:#FBD971;" cx="24" cy="24" rx="22" ry="16"/> <ellipse style="fill:#556080;" cx="24" cy="20" rx="20" ry="12"/> <!-- Gray triangles to cover cat ears with 15-degree outward angle --> <polygon style="fill:#556080;" points="8,15 14,-1 20,15" transform="rotate(-15 14 7)"/> <polygon style="fill:#556080;" points="28,15 34,-1 40,15" transform="rotate(15 34 7)"/> </g> </g>`,
            viewBox: '0 0 48 48'
        },
        'necklace': {
            content: `<g transform="translate(1 1)"> <g> <polygon style="fill:#63D3FD;" points="186.733,383 255,331.8 323.267,383 323.267,451.267 255,502.467 186.733,451.267 "/> <polygon style="fill:#63D3FD;" points="220.867,400.067 255,374.467 289.133,400.067 289.133,434.2 255,459.8 220.867,434.2 "/> </g> <g> <path style="fill:#FFE100;" d="M468.333,75.8c-5.12,0-8.533-3.413-8.533-8.533c0-7.68,0-17.067-0.853-26.453 c0-5.12,3.413-8.533,7.68-8.533s8.533,3.413,9.387,7.68c0.853,10.24,0.853,18.773,0.853,27.307 C476.867,72.387,473.453,75.8,468.333,75.8z"/> <path style="fill:#FFE100;" d="M462.36,152.6h-0.853h-0.853c-5.12,0-8.533-4.267-8.533-8.533c0-2.56,0.853-5.12,3.413-6.827 c0.853-5.973,1.707-12.8,2.56-19.627c0.853-4.267,4.267-7.68,9.387-7.68c4.267,0.853,7.68,4.267,7.68,9.387 c-0.853,10.24-1.707,18.773-3.413,26.453C470.893,150.04,466.627,152.6,462.36,152.6z"/> <path style="fill:#FFE100;" d="M443.587,231.107c-0.853,0-1.707,0-2.56-0.853c-4.267-1.707-6.827-6.827-5.12-11.093 c2.56-8.533,5.973-17.92,8.533-28.16c0.853-4.267,5.973-6.827,10.24-5.973c4.267,0.853,6.827,5.973,5.973,10.24 c-2.56,11.093-5.973,20.48-8.533,29.013C450.413,228.547,447,231.107,443.587,231.107z"/> <path style="fill:#FFE100;" d="M411.16,300.227c-1.707,0-3.413,0-4.267-0.853c-4.267-2.56-5.12-7.68-2.56-11.947 c4.267-6.827,8.533-13.653,11.947-21.333c2.56-4.267,6.827-5.973,11.093-3.413c4.267,2.56,5.973,7.68,3.413,11.093 c-4.267,7.68-8.533,15.36-12.8,23.04C417.133,298.52,414.573,300.227,411.16,300.227z"/> <path style="fill:#FFE100;" d="M361.667,359.96c-2.56,0-5.12-0.853-6.827-2.56c-3.413-3.413-2.56-8.533,0.853-11.947 c5.973-5.12,11.947-11.093,18.773-18.773c3.413-3.413,8.533-3.413,11.947-0.853c3.413,3.413,3.413,8.533,0.853,11.947 c-6.827,7.68-13.653,14.507-20.48,20.48C365.933,359.96,364.227,359.96,361.667,359.96z"/> <path style="fill:#FFE100;" d="M165.4,359.96c-1.707,0-4.267-0.853-5.973-1.707c-6.827-5.973-13.653-12.8-20.48-20.48 c-3.413-3.413-2.56-8.533,0.853-11.947c3.413-3.413,8.533-2.56,11.947,0.853c5.973,6.827,12.8,12.8,18.773,18.773 c3.413,3.413,4.267,8.533,0.853,11.947C170.52,359.107,167.96,359.96,165.4,359.96z"/> <path style="fill:#FFE100;" d="M116.76,300.227c-2.56,0-5.973-1.707-7.68-4.267c-5.12-8.533-9.387-15.36-12.8-23.04 c-1.707-4.267-0.853-9.387,3.413-11.093c4.267-2.56,9.387-0.853,11.093,3.413c3.413,6.827,7.68,13.653,11.947,21.333 c2.56,4.267,0.853,9.387-2.56,11.947C119.32,300.227,117.613,300.227,116.76,300.227z"/> <path style="fill:#FFE100;" d="M84.333,231.107c-3.413,0-6.827-2.56-7.68-5.973c-3.413-10.24-6.827-19.627-9.387-29.013 c-0.853-4.267,1.707-9.387,5.973-10.24c4.267-0.853,9.387,1.707,10.24,5.973c2.56,9.387,5.12,18.773,8.533,28.16 c1.707,4.267-0.853,9.387-5.12,11.093C86.04,231.107,85.187,231.107,84.333,231.107z"/> <path style="fill:#FFE100;" d="M64.707,152.6c-4.267,0-7.68-3.413-8.533-6.827c-1.707-9.387-2.56-17.92-3.413-26.453 c-0.853-4.267,2.56-8.533,7.68-9.387c5.12-0.853,8.533,2.56,9.387,7.68c0.853,5.973,1.707,12.8,2.56,19.627 c2.56,1.707,3.413,4.267,3.413,6.827c0,5.12-3.413,8.533-8.533,8.533H64.707C65.56,152.6,65.56,152.6,64.707,152.6z"/> <path style="fill:#FFE100;" d="M58.733,75.8c-4.267,0-8.533-3.413-8.533-8.533c0-8.533,0-17.067,0.853-27.307 c0-5.12,4.267-8.533,9.387-7.68c5.12,0,8.533,4.267,7.68,9.387c0,8.533-0.853,17.067-0.853,25.6 C67.267,72.387,63.853,75.8,58.733,75.8z"/> <path style="fill:#FFE100;" d="M417.133,314.733c0,14.507-11.093,25.6-25.6,25.6s-25.6-11.093-25.6-25.6 c0-14.507,11.093-25.6,25.6-25.6S417.133,300.227,417.133,314.733"/> <path style="fill:#FFE100;" d="M451.267,246.467c0,14.507-11.093,25.6-25.6,25.6s-25.6-11.093-25.6-25.6 c0-14.507,11.093-25.6,25.6-25.6S451.267,231.96,451.267,246.467"/> <path style="fill:#FFE100;" d="M476.867,169.667c0,14.507-11.093,25.6-25.6,25.6s-25.6-11.093-25.6-25.6 c0-14.507,11.093-25.6,25.6-25.6S476.867,155.16,476.867,169.667"/> <path style="fill:#FFE100;" d="M92.867,314.733c0,14.507,11.093,25.6,25.6,25.6s25.6-11.093,25.6-25.6 c0-14.507-11.093-25.6-25.6-25.6S92.867,300.227,92.867,314.733"/> <path style="fill:#FFE100;" d="M58.733,246.467c0,14.507,11.093,25.6,25.6,25.6s25.6-11.093,25.6-25.6 c0-14.507-11.093-25.6-25.6-25.6S58.733,231.96,58.733,246.467"/> <path style="fill:#FFE100;" d="M33.133,169.667c0,14.507,11.093,25.6,25.6,25.6s25.6-11.093,25.6-25.6 c0-14.507-11.093-25.6-25.6-25.6S33.133,155.16,33.133,169.667"/> <path style="fill:#FFE100;" d="M24.6,92.867c0,14.507,11.093,25.6,25.6,25.6s25.6-11.093,25.6-25.6s-11.093-25.6-25.6-25.6 S24.6,78.36,24.6,92.867"/> <path style="fill:#FFE100;" d="M34.84,7.533c-0.853,2.56-1.707,5.12-1.707,8.533c0,14.507,11.093,25.6,25.6,25.6 s25.6-11.093,25.6-25.6c0-2.56,0-5.973-0.853-8.533H34.84z"/> <path style="fill:#FFE100;" d="M427.373,7.533c-0.853,2.56-1.707,5.12-1.707,8.533c0,14.507,11.093,25.6,25.6,25.6 s25.6-11.093,25.6-25.6c0-2.56-0.853-5.973-1.707-8.533H427.373z"/> <path style="fill:#FFE100;" d="M434.2,92.867c0,14.507,11.093,25.6,25.6,25.6s25.6-11.093,25.6-25.6s-11.093-25.6-25.6-25.6 C446.147,67.267,434.2,78.36,434.2,92.867"/> <path style="fill:#FFE100;" d="M186.733,383l16.213-12.8c0-1.707,0.853-3.413,0.853-4.267c0-14.507-11.093-25.6-25.6-25.6 c-14.507,0-25.6,11.093-25.6,25.6s11.093,25.6,25.6,25.6c3.413,0,5.973-0.853,8.533-1.707V383z"/> <path style="fill:#FFE100;" d="M331.8,340.333c-14.507,0-25.6,11.093-25.6,25.6c0,1.707,0,3.413,0.853,4.267l16.213,12.8v6.827 c2.56,0.853,5.12,1.707,8.533,1.707c14.507,0,25.6-11.093,25.6-25.6S346.307,340.333,331.8,340.333"/> </g> <path d="M391.533,348.867c-18.773,0-34.133-15.36-34.133-34.133c0-18.773,15.36-34.133,34.133-34.133s34.133,15.36,34.133,34.133 C425.667,333.507,410.307,348.867,391.533,348.867z M391.533,297.667c-9.387,0-17.067,7.68-17.067,17.067 c0,9.387,7.68,17.067,17.067,17.067s17.067-7.68,17.067-17.067C408.6,305.347,400.92,297.667,391.533,297.667z"/> <path d="M425.667,280.6c-18.773,0-34.133-15.36-34.133-34.133s15.36-34.133,34.133-34.133s34.133,15.36,34.133,34.133 S444.44,280.6,425.667,280.6z M425.667,229.4c-9.387,0-17.067,7.68-17.067,17.067s7.68,17.067,17.067,17.067 s17.067-7.68,17.067-17.067S435.053,229.4,425.667,229.4z"/> <path d="M451.267,203.8c-18.773,0-34.133-15.36-34.133-34.133s15.36-34.133,34.133-34.133s34.133,15.36,34.133,34.133 S470.04,203.8,451.267,203.8z M451.267,152.6c-9.387,0-17.067,7.68-17.067,17.067s7.68,17.067,17.067,17.067 s17.067-7.68,17.067-17.067S460.653,152.6,451.267,152.6z"/> <path d="M118.467,348.867c-18.773,0-34.133-15.36-34.133-34.133c0-18.773,15.36-34.133,34.133-34.133s34.133,15.36,34.133,34.133 C152.6,333.507,137.24,348.867,118.467,348.867z M118.467,297.667c-9.387,0-17.067,7.68-17.067,17.067 c0,9.387,7.68,17.067,17.067,17.067s17.067-7.68,17.067-17.067C135.533,305.347,127.853,297.667,118.467,297.667z"/> <path d="M84.333,280.6c-18.773,0-34.133-15.36-34.133-34.133s15.36-34.133,34.133-34.133s34.133,15.36,34.133,34.133 S103.107,280.6,84.333,280.6z M84.333,229.4c-9.387,0-17.067,7.68-17.067,17.067s7.68,17.067,17.067,17.067 s17.067-7.68,17.067-17.067S93.72,229.4,84.333,229.4z"/> <path d="M58.733,203.8c-18.773,0-34.133-15.36-34.133-34.133s15.36-34.133,34.133-34.133s34.133,15.36,34.133,34.133 S77.507,203.8,58.733,203.8z M58.733,152.6c-9.387,0-17.067,7.68-17.067,17.067s7.68,17.067,17.067,17.067 s17.067-7.68,17.067-17.067S68.12,152.6,58.733,152.6z"/> <path d="M50.2,127c-18.773,0-34.133-15.36-34.133-34.133S31.427,58.733,50.2,58.733s34.133,15.36,34.133,34.133 S68.973,127,50.2,127z M50.2,75.8c-9.387,0-17.067,7.68-17.067,17.067s7.68,17.067,17.067,17.067s17.067-7.68,17.067-17.067 S59.587,75.8,50.2,75.8z"/> <path d="M58.733,50.2C39.96,50.2,24.6,34.84,24.6,16.067c0-4.267,0.853-7.68,1.707-11.093C28.013,1.56,31.427-1,34.84-1l0,0h48.64 c3.413,0,6.827,2.56,7.68,5.973c1.707,3.413,1.707,6.827,1.707,11.093C92.867,34.84,77.507,50.2,58.733,50.2z M41.667,16.067 c0,9.387,7.68,17.067,17.067,17.067S75.8,25.453,75.8,16.067H41.667z"/> <path d="M451.267,50.2c-18.773,0-34.133-15.36-34.133-34.133c0-4.267,0.853-7.68,1.707-11.093C420.547,1.56,423.96-1,427.373-1 h48.64c3.413,0,6.827,2.56,7.68,5.973C485.4,8.387,485.4,11.8,485.4,16.067C485.4,34.84,470.04,50.2,451.267,50.2z M434.2,16.067 c0,9.387,7.68,17.067,17.067,17.067s17.067-7.68,17.067-17.067H434.2z"/> <path d="M459.8,127c-18.773,0-34.133-15.36-34.133-34.133s15.36-34.133,34.133-34.133s34.133,15.36,34.133,34.133 S478.573,127,459.8,127z M459.8,75.8c-9.387,0-17.067,7.68-17.067,17.067s7.68,17.067,17.067,17.067s17.067-7.68,17.067-17.067 S469.187,75.8,459.8,75.8z"/> <path d="M255,511c-1.707,0-3.413-0.853-5.12-1.707l-68.267-51.2c-1.707-1.707-3.413-4.267-3.413-6.827V383 c0-2.56,0.853-5.12,3.413-6.827l68.267-51.2c3.413-2.56,6.827-2.56,10.24,0l68.267,51.2c2.56,1.707,3.413,4.267,3.413,6.827v68.267 c0,2.56-0.853,5.12-3.413,6.827l-68.267,51.2C259.267,510.147,256.707,511,255,511z M195.267,447L255,492.227L314.733,447v-59.733 L255,342.04l-59.733,45.227V447z"/> <path d="M255,468.333c-1.707,0-3.413-0.853-5.12-1.707l-34.133-25.6c-1.707-1.707-3.413-4.267-3.413-6.827v-34.133 c0-2.56,0.853-5.12,3.413-6.827l34.133-25.6c3.413-2.56,6.827-2.56,10.24,0l34.133,25.6c2.56,1.707,3.413,4.267,3.413,6.827V434.2 c0,2.56-0.853,5.12-3.413,6.827l-34.133,25.6C259.267,467.48,256.707,468.333,255,468.333z M229.4,429.933L255,449.56l25.6-19.627 v-25.6L255,384.707l-25.6,19.627V429.933z"/> <path d="M323.267,459.8c-1.707,0-2.56,0-3.413-0.853L285.72,441.88c-4.267-1.707-5.973-6.827-3.413-11.093 c1.707-4.267,6.827-5.973,11.093-3.413l34.133,17.067c4.267,1.707,5.973,6.827,3.413,11.093 C330.093,458.093,326.68,459.8,323.267,459.8z"/> <path d="M220.867,408.6c-0.853,0-2.56,0-3.413-0.853L183.32,390.68c-4.267-1.707-5.973-6.827-3.413-11.093 c1.707-4.267,6.827-5.973,11.093-3.413l34.133,17.067c4.267,1.707,5.973,6.827,3.413,11.093 C227.693,406.893,224.28,408.6,220.867,408.6z"/> <path d="M289.133,408.6c-3.413,0-5.973-1.707-7.68-5.12c-1.707-4.267,0-9.387,3.413-11.093L319,375.32 c4.267-1.707,9.387,0,11.093,3.413c1.707,4.267,0,9.387-3.413,11.093l-34.133,17.067C291.693,408.6,290.84,408.6,289.133,408.6z"/> <path d="M186.733,459.8c-3.413,0-5.973-1.707-7.68-5.12c-1.707-4.267,0-9.387,3.413-11.093L216.6,426.52 c4.267-1.707,9.387,0,11.093,3.413c1.707,4.267,0,9.387-3.413,11.093l-34.133,17.067C189.293,459.8,188.44,459.8,186.733,459.8z"/> <path d="M255,511c-5.12,0-8.533-3.413-8.533-8.533V459.8c0-5.12,3.413-8.533,8.533-8.533s8.533,3.413,8.533,8.533v42.667 C263.533,507.587,260.12,511,255,511z"/> <path d="M255,383c-5.12,0-8.533-3.413-8.533-8.533V331.8c0-5.12,3.413-8.533,8.533-8.533s8.533,3.413,8.533,8.533v42.667 C263.533,379.587,260.12,383,255,383z"/> <path d="M178.2,400.067c-18.773,0-34.133-15.36-34.133-34.133S159.427,331.8,178.2,331.8s34.133,15.36,34.133,34.133 c0,1.707,0,4.267-0.853,5.973c0,1.707-1.707,4.267-3.413,5.12l-12.8,10.24v2.56c0,3.413-2.56,6.827-5.973,7.68 C185.88,399.213,182.467,400.067,178.2,400.067z M178.2,348.867c-9.387,0-17.067,7.68-17.067,17.067S168.813,383,178.2,383 c0-2.56,0.853-5.12,3.413-6.827l13.653-10.24l0,0C195.267,356.547,187.587,348.867,178.2,348.867z"/> <path d="M331.8,400.067c-3.413,0-7.68-0.853-11.093-1.707c-3.413-0.853-5.973-4.267-5.973-7.68v-2.56l-12.8-10.24 c-1.707-1.707-2.56-3.413-3.413-5.12c0-1.707-0.853-4.267-0.853-5.973c0-18.773,15.36-34.133,34.133-34.133 s34.133,15.36,34.133,34.133S350.573,400.067,331.8,400.067z M314.733,365.933l13.653,10.24c2.56,1.707,3.413,4.267,3.413,6.827 c9.387,0,17.067-7.68,17.067-17.067s-7.68-17.067-17.067-17.067S314.733,356.547,314.733,365.933L314.733,365.933z"/> <path d="M315.587,385.56c-1.707,0-3.413-0.853-5.12-1.707L255,342.893l-55.467,41.813c-3.413,2.56-9.387,1.707-11.947-1.707 c-0.853-2.56-0.853-4.267-0.853-5.973c0-2.56,0.853-5.12,3.413-6.827l5.12-4.267l0,0c0-9.387-7.68-17.067-17.067-17.067 c-5.973,0-11.093,2.56-14.507,7.68c-1.707,1.707-3.413,3.413-5.973,3.413s-5.12,0-6.827-1.707 c-6.827-5.973-13.653-12.8-20.48-20.48c-2.56-3.413-2.56-8.533,0-11.093c3.413-3.413,5.12-7.68,5.12-11.947 c0-11.947-12.8-21.333-24.747-15.36c-4.267,1.707-8.533,0.853-11.093-3.413c-5.12-8.533-9.387-15.36-12.8-23.04 c-0.853-1.707-0.853-4.267-0.853-6.827c0-2.56,2.56-4.267,4.267-5.12c7.68-1.707,11.093-7.68,11.093-14.507 c0-11.093-11.093-20.48-23.04-16.213c-2.56,0.853-4.267,0.853-6.827,0c-1.707-0.853-3.413-2.56-4.267-5.12 c-3.413-10.24-6.827-19.627-9.387-29.013c-0.853-4.267,1.707-8.533,5.973-10.24c7.68-2.56,11.947-8.533,11.947-16.213 c0-9.387-7.68-17.067-17.067-17.067h-1.707c-4.267,0.853-8.533-2.56-9.387-6.827c-1.707-9.387-2.56-17.92-3.413-26.453 c-0.853-4.267,2.56-8.533,7.68-9.387c8.533-0.853,15.36-8.533,15.36-17.067c0-9.387-7.68-17.067-17.067-17.067 c-4.267,0-8.533-3.413-8.533-8.533c0-8.533,0-17.067,0.853-27.307c0-2.56,1.707-5.12,3.413-6.827c2.56-1.707,5.12-1.707,7.68-0.853 c2.56,0.853,4.267,0.853,5.12,0.853c9.387,0,17.067-7.68,17.067-17.067c0-5.12,3.413-8.533,8.533-8.533 c5.12,0,8.533,3.413,8.533,8.533c0,18.773-15.36,34.133-34.133,34.133c0,3.413,0,6.827,0,9.387 c14.507,3.413,25.6,17.067,25.6,33.28c0,14.507-9.387,27.307-22.187,31.573c0,3.413,0.853,7.68,1.707,11.093 c16.213,2.56,29.013,17.067,29.013,34.133c0,11.947-5.973,23.04-16.213,29.013c1.707,4.267,2.56,9.387,4.267,13.653 c20.48-1.707,37.547,14.507,37.547,34.133c0,10.24-4.267,19.627-11.947,26.453c1.707,2.56,3.413,5.973,5.12,8.533 c2.56-0.853,5.12-0.853,6.827-0.853c18.773,0,34.133,15.36,34.133,34.133c0,5.973-1.707,11.947-4.267,17.067 c2.56,2.56,5.12,5.973,8.533,8.533c5.973-5.12,13.653-7.68,22.187-7.68c14.507,0,27.307,9.387,32.427,23.04l39.253-29.867 c3.413-2.56,6.827-2.56,10.24,0l39.253,29.867c4.267-13.653,17.067-23.04,32.427-23.04c7.68,0,15.36,2.56,22.187,7.68 c2.56-2.56,5.12-5.12,8.533-8.533c-2.56-5.12-4.267-11.093-4.267-17.067c0-18.773,15.36-34.133,34.133-34.133 c2.56,0,5.12,0,6.827,0.853c1.707-2.56,3.413-5.973,5.12-8.533c-7.68-6.827-11.947-16.213-11.947-25.6 c0-19.627,17.067-35.84,37.547-34.133c1.707-4.267,2.56-9.387,4.267-13.653c-10.24-5.973-16.213-17.067-16.213-29.013 c0-17.067,12.8-31.573,29.013-34.133c0.853-3.413,0.853-6.827,1.707-11.093c-12.8-5.12-22.187-17.067-22.187-31.573 c0-16.213,11.093-29.013,25.6-33.28c0-3.413,0-5.973,0-9.387c-18.773,0-34.133-15.36-34.133-34.133c0-5.12,3.413-8.533,8.533-8.533 c5.12,0,8.533,3.413,8.533,8.533c0,9.387,7.68,17.067,17.067,17.067c1.707,0,3.413,0,5.12-0.853c2.56-0.853,5.12,0,7.68,0.853 c2.56,1.707,3.413,4.267,3.413,6.827c-0.853,9.387-0.853,17.92-0.853,26.453c0,5.12-3.413,8.533-8.533,8.533 c-9.387,0-17.067,7.68-17.067,17.067c0,8.533,6.827,16.213,15.36,17.067c4.267,0.853,7.68,4.267,7.68,9.387 c-0.853,10.24-1.707,18.773-3.413,26.453c-0.853,4.267-5.12,7.68-9.387,6.827h-0.853l0,0c-10.24,0-17.92,7.68-17.92,17.067 c0,7.68,5.12,13.653,11.947,16.213c4.267,1.707,6.827,5.973,5.973,10.24c-2.56,11.093-5.973,20.48-8.533,29.013 c-0.853,2.56-2.56,4.267-4.267,5.12c-1.707,0.853-4.267,0.853-6.827,0c-12.8-4.267-23.893,5.12-23.893,16.213 c0,6.827,3.413,12.8,10.24,15.36c1.707,0.853,3.413,2.56,4.267,5.12c0.853,2.56,0.853,4.267-0.853,6.827 c-4.267,7.68-8.533,15.36-12.8,23.04c-2.56,3.413-6.827,5.12-11.093,3.413c-11.093-5.973-23.893,2.56-23.893,14.507 c0,4.267,1.707,8.533,4.267,11.947c2.56,3.413,3.413,8.533,0,11.093c-6.827,7.68-13.653,14.507-20.48,20.48 c-1.707,1.707-4.267,2.56-6.827,1.707c-2.56,0-4.267-1.707-5.973-3.413c-3.413-5.12-8.533-7.68-14.507-7.68 c-9.387,0-17.067,7.68-17.067,17.067l5.973,4.267c2.56,1.707,3.413,4.267,3.413,6.827c0,1.707-0.853,3.413-1.707,5.12 C320.707,384.707,318.147,385.56,315.587,385.56z"/> </g>`,
            viewBox: '0 0 512 512'
        },
        'ribbon': {
            content: `<path d="M60.23 50.47s-10.56 2.98-19.38 8.8c-7.26 4.78-13.83 12.04-13.83 12.04l1.88 17.76L34.1 93l21.81-19.63s3.1-8.1 4.21-13.65c.58-2.86.88-5.66.88-5.66l-.77-3.59z" fill="#af0c1a"></path><path d="M69.19 52.69s2.21 8.35 3.02 11.66c.92 3.74 2.69 9.82 2.69 9.82l21.69 15.42l8.2-16.05s-4.61-5.72-7.09-8.71c-2.48-2.99-16.57-12.72-16.57-12.72l-11.94.58z" fill="#af0c1a"></path><path d="M13.32 98.51s.75-6.87 6.39-16.69s8.41-11.53 8.41-11.53s3.26-.76 6.15-1.11c3.12-.38 5.72-.09 5.72-.09s-3.93 4.78-6.15 9.39s-3.59 8.97-1.96 9.82c1.62.85 3.43-5 6.92-10.33c3.67-5.62 6.47-8.38 6.47-8.38s2.8.09 5.72.96c3.23.96 5.02 2.6 5.02 2.6s-5.76 15.49-8.92 24.46s-7.72 20.87-8.83 21.3c-1.11.43-3.04-3.02-4.24-5.75c-1.2-2.73-5.29-17.25-5.55-16.99s-15.15 2.34-15.15 2.34z" fill="#ff605e"></path><path d="M74.89 74.1s2.51-1.69 4.56-2.38c2.05-.68 5.68-1.26 5.68-1.26s2.18 4.26 3.88 7.17c1.71 2.9 4.49 8.88 6.28 8.02c1.79-.85-.51-6.89-1.84-9.56c-1.21-2.43-3.33-5.72-3.33-5.72s2.65-.34 7.51.6c4.87.94 7.17 2.56 7.17 2.56s4.5 6.68 6.92 10.76c3.22 5.44 7.26 14.68 7.26 14.68l-17.85 1.46l-8.97 19.64s-1.24.08-1.93-.34c-.68-.43-3.91-9.3-5.66-14.5c-2.75-8.21-9.68-31.13-9.68-31.13z" fill="#ff605e"></path><path d="M100.1 98.73c-.69.64-7.36 17.21-7.56 17.7c-1.03 2.54-2.44 3.12-2.44 3.12s1.21 1.74 3.26 1.14c1.58-.46 9.1-18.27 9.1-18.27s13.59.13 15.57-.73c2.22-.96.92-2.77.92-2.77s-17.93-1.05-18.85-.19z" fill="#dc0d28"></path><path d="M13.35 98.13s4.02-.73 7.72-1.71s8.44-2.37 8.44-2.37s3.74 10.22 4.86 13.65c1.12 3.43 4.04 11.1 4.04 11.1s-1.27 1.37-3.1.24c-1.71-1.06-4.98-10.1-5.84-12.5c-1.1-3.04-2.53-7.55-2.53-7.55s-3.88 1.29-7.11 1.88c-3.23.59-5.42 1.02-6.28.16c-.86-.85-.2-2.9-.2-2.9z" fill="#dc0d28"></path><path d="M46.36 28.97l-18.55-4.76L14.7 34.87l-5.44 26l2.97 5s3.22 2.46 12.28.44c9.06-2.03 29.52-9.91 29.52-9.91s2.61 1.08 4.95 1.4s6.33-.52 6.33-.52s5.02.82 8.01.61c2.98-.21 4.26-.53 4.26-.53s9.81 5.22 19.61 7.99s17.37 3.4 19.08 3.2c2.66-.32 3.94-4.8 3.94-4.8l-1.07-9.81l-14.28-30.7l-29.74 8.53l-1.81 2.03l-7.79-2.12l-10.57 2.08l-1.33-1.56l-7.26-3.23z" fill="#dc0d28"></path><path d="M54.59 33.37s1.18-3.66 10.07-3.66c8.29 0 9.41 3.28 9.41 3.28s1.08 7.2.1 13.44c-.87 5.58-3.96 11.41-3.96 11.41s-2.05.51-5.22.6c-2.99.08-6.17-.67-6.17-.67S56 52.8 54.81 46.56c-1.14-6.04-.22-13.19-.22-13.19z" fill="#ff605e"></path><path d="M59.9 45.07c1.7.34 2.67-4.23 3.74-5.48c1.68-1.95 5.66-1.57 5.59-4.18c-.05-2.06-7.63-3.01-10.36.81c-1.9 2.67-1.68 8.31 1.03 8.85z" fill="#fcc4bf"></path><path d="M75.11 31.77s1.13 1.38 2.13 3.86c.74 1.82 1.54 4.48 1.54 4.48s3.68-3.21 6.83-4.95c3.14-1.74 18.15-7.07 18.54.2c.31 5.91-10.75 5.79-15.94 7.9c-3.65 1.48-8.62 4.28-8.62 4.28v6.02s2.4 2.56 8.02 3.03c5.62.47 20.03.3 22.87.42c5.91.25 7.98 2.9 7.98 6.05c0 3.14-1.11 4.43-.74 4.84c.48.54 2.95-1.43 4.29-6.52c1.34-5.09 2.37-14.6 1.97-22.75c-.47-9.63-2.37-22.52-6.67-24.92s-16.84.8-24.2 3.95c-12.38 5.3-18 14.11-18 14.11z" fill="#ff605e"></path><path d="M50.37 39.74s.46-2.37 1.33-4.25c.68-1.47 1.93-3.28 1.93-3.28s-2.36-6.15-11.05-11.14s-26.87-8.89-32.66-6.69c-2.88 1.09-5.67 8.48-6.52 19.7c-.73 9.74.23 21.4 3.3 27.15c2.31 4.33 8.17 7.55 9.95 5.77c.87-.87-5.77-3.89.56-7.87c3.67-2.3 10.69-2.1 16.78-2.5c6.09-.4 8.69-.1 11.89-.9c3.2-.8 5.19-2 5.19-2s-.75-2.5-.9-3.7c-.21-1.64-.34-2.98-.34-2.98s-2.11-1.19-7.65-2.11c-5.43-.91-14.35-.71-14.48-6.69c-.17-7.59 8.59-5.69 12.68-4s9.49 4.99 9.99 5.49z" fill="#ff605e"></path>`,
            viewBox: '0 0 128 128'
        },
        'scarf': {
            content: `<g> <g> <path style="fill:#C03A2B;" d="M474.087,282.585c-2.185,0-4.369-0.836-6.033-2.5l-36.207-36.207 c-3.328-3.337-3.328-8.738,0-12.066c3.337-3.337,8.738-3.337,12.066,0l36.207,36.207c3.337,3.337,3.337,8.73,0,12.066 C478.457,281.749,476.272,282.585,474.087,282.585"/> <path style="fill:#C03A2B;" d="M449.949,306.719c-2.185,0-4.369-0.836-6.033-2.5l-36.207-36.198 c-3.328-3.337-3.328-8.738,0-12.066c3.337-3.337,8.738-3.337,12.066,0l36.207,36.198c3.337,3.337,3.337,8.73,0,12.066 C454.318,305.882,452.134,306.719,449.949,306.719"/> <path style="fill:#C03A2B;" d="M425.816,330.86c-2.185,0-4.369-0.836-6.033-2.5l-36.207-36.207c-3.328-3.337-3.328-8.738,0-12.066 c3.337-3.337,8.738-3.337,12.066,0l36.207,36.207c3.337,3.337,3.337,8.73,0,12.066C430.185,330.024,428.001,330.86,425.816,330.86 "/> <path style="fill:#C03A2B;" d="M401.679,354.994c-2.185,0-4.369-0.836-6.033-2.5l-36.207-36.207 c-3.328-3.337-3.328-8.738,0-12.066c3.337-3.337,8.738-3.337,12.066,0l36.207,36.207c3.337,3.337,3.337,8.73,0,12.066 C406.048,354.157,403.863,354.994,401.679,354.994"/> <path style="fill:#C03A2B;" d="M377.541,379.127c-2.185,0-4.369-0.836-6.033-2.5l-36.207-36.198 c-3.328-3.337-3.328-8.738,0-12.066c3.337-3.337,8.738-3.337,12.066,0l36.207,36.198c3.337,3.337,3.337,8.73,0,12.066 C381.91,378.29,379.726,379.127,377.541,379.127"/> <path style="fill:#C03A2B;" d="M353.408,403.26c-2.185,0-4.369-0.836-6.033-2.5l-36.207-36.198c-3.328-3.337-3.328-8.738,0-12.066 c3.337-3.337,8.738-3.337,12.066,0l36.207,36.198c3.337,3.337,3.337,8.73,0,12.066C357.777,402.423,355.593,403.26,353.408,403.26 "/> </g> <path style="fill:#9E2C23;" d="M317.204,367.06c-2.185,0-4.369-0.836-6.033-2.5L202.541,255.939 c-1.596-1.604-2.492-3.772-2.492-6.033V8.566c0-1.852,0.597-3.644,1.707-5.111c1.485-1.988,3.755-3.226,6.221-3.405 c2.466-0.196,4.898,0.717,6.647,2.466l229.291,229.299c3.337,3.337,3.337,8.738,0,12.066L323.237,364.559 C321.573,366.223,319.388,367.06,317.204,367.06"/> <g> <polygon style="fill:#F0C419;" points="281.491,140.777 293.557,213.182 221.152,201.116 209.086,128.711 "/> <polygon style="fill:#F0C419;" points="365.966,225.252 378.032,297.657 305.627,285.591 293.561,213.186 "/> </g> <g> <path style="fill:#9E2C23;" d="M208.579,512.002c-4.71,0-8.533-3.814-8.533-8.533v-51.2c0-4.719,3.823-8.533,8.533-8.533 s8.533,3.814,8.533,8.533v51.2C217.112,508.187,213.289,512.002,208.579,512.002"/> <path style="fill:#9E2C23;" d="M174.445,512.002c-4.71,0-8.533-3.814-8.533-8.533v-51.2c0-4.719,3.823-8.533,8.533-8.533 s8.533,3.814,8.533,8.533v51.2C182.979,508.187,179.156,512.002,174.445,512.002"/> <path style="fill:#9E2C23;" d="M140.312,512.002c-4.71,0-8.533-3.814-8.533-8.533v-51.2c0-4.719,3.823-8.533,8.533-8.533 s8.533,3.814,8.533,8.533v51.2C148.845,508.187,145.023,512.002,140.312,512.002"/> <path style="fill:#9E2C23;" d="M106.179,512.002c-4.71,0-8.533-3.814-8.533-8.533v-51.2c0-4.719,3.823-8.533,8.533-8.533 s8.533,3.814,8.533,8.533v51.2C114.712,508.187,110.889,512.002,106.179,512.002"/> <path style="fill:#9E2C23;" d="M72.045,512.002c-4.71,0-8.533-3.814-8.533-8.533v-51.2c0-4.719,3.823-8.533,8.533-8.533 c4.71,0,8.533,3.814,8.533,8.533v51.2C80.579,508.187,76.756,512.002,72.045,512.002"/> <path style="fill:#9E2C23;" d="M37.912,512.002c-4.71,0-8.533-3.814-8.533-8.533v-51.2c0-4.719,3.823-8.533,8.533-8.533 s8.533,3.814,8.533,8.533v51.2C46.445,508.187,42.623,512.002,37.912,512.002"/> </g> <path style="fill:#C03A2B;" d="M208.579,460.802H37.912c-4.71,0-8.533-3.814-8.533-8.533V8.535c0-4.719,3.823-8.533,8.533-8.533 h170.667c4.71,0,8.533,3.814,8.533,8.533v443.733C217.112,456.987,213.289,460.802,208.579,460.802"/> <g> <polygon style="fill:#F0C419;" points="165.912,153.602 123.245,213.335 80.579,153.602 123.245,93.868 "/> <polygon style="fill:#F0C419;" points="165.912,273.068 123.245,332.802 80.579,273.068 123.245,213.335 "/> <polygon style="fill:#F0C419;" points="168.958,396.802 123.245,460.802 77.532,396.802 123.245,332.802 "/> <polygon style="fill:#F0C419;" points="80.579,28.16 123.245,93.867 165.912,28.16 147.625,0 98.866,0 "/> </g> </g>`,
            viewBox: '0 0 512.002 512.002'
        },
        'superhero': {
            content: `<g> <circle style="fill:#FBD971;" cx="24" cy="27" r="21"/> <path style="fill:#556080;" d="M40,13.417V1c-1.143,4.342-3.538,6.96-4.932,8.177C31.852,7.176,28.067,6,24,6 c-3.532,0-6.856,0.882-9.777,2.422C12.9,7.337,10.228,4.667,9,0v12.317C5.292,16.104,3,21.282,3,27l18.59,7.082 c1.552,0.591,3.267,0.591,4.819,0L45,27C45,21.816,43.113,17.08,40,13.417z"/> <polygon style="fill:#FFFFFF;" points="20,22 18.786,24.01 17,27 8,19 "/> <polygon style="fill:#FFFFFF;" points="28,22 29.192,24.01 31,27 40,19 "/> <path style="fill:#F0C419;" d="M29,42H19c-0.552,0-1-0.447-1-1s0.448-1,1-1h10c0.552,0,1,0.447,1,1S29.552,42,29,42z"/> </g>`,
            viewBox: '0 0 48 48'
        },
        'top-hat': {
            content: `<path style="fill:#424953;" d="M511.98,367.982c0,23.562-52.857,85.34-255.99,85.34S0,391.544,0,367.982 s114.613-21.343,255.99-21.343C397.36,346.639,511.98,344.421,511.98,367.982z"/> <path style="fill:#646C77;" d="M255.99,58.658c-100.145,0-181.329,14.327-181.329,31.998l10.671,287.981 c0,0,42.663,21.344,170.658,21.344s170.65-21.344,170.65-21.344l10.688-287.981C437.328,72.985,356.142,58.658,255.99,58.658z"/> <path style="fill:#EC5564;" d="M428.234,335.983c0,0-44.249,21.343-172.244,21.343S83.747,335.983,83.747,335.983l1.585,42.654 c0,0,42.663,21.344,170.658,21.344s170.65-21.344,170.65-21.344L428.234,335.983z"/> <g style="opacity:0.2;"> <path style="fill:#FFFFFF;" d="M255.99,58.658c-3.578,0-7.132,0.023-10.664,0.055c95.176,0.977,170.659,14.905,170.659,31.943 l-10.656,294.856l21.312-6.875l10.688-287.981C437.328,72.985,356.142,58.658,255.99,58.658z"/> </g> <path style="fill:#59616B;" d="M437.328,90.656c0,17.672-81.186,31.999-181.338,31.999c-100.145,0-181.329-14.327-181.329-31.999 c0-17.671,81.185-31.998,181.329-31.998C356.142,58.658,437.328,72.985,437.328,90.656z"/>`,
            viewBox: '0 0 511.98 511.98'
        },
        'winter-hat': {
            content: `<path style="fill:#4FC0E8;" d="M480.623,330.029c-6.094-29.764-14.656-57.23-25.453-81.668 c-13.624-30.874-30.873-56.99-51.278-77.623c-38.546-38.982-88.325-58.748-147.933-58.748c-59.607,0-109.371,19.765-147.932,58.748 c-20.39,20.632-37.655,46.749-51.279,77.623c-10.796,24.438-19.359,51.904-25.452,81.668 c-10.359,50.514-10.046,89.764-10.015,91.404l0.109,10.547h469.139l0.125-10.547C490.669,419.793,490.981,380.543,480.623,330.029z" /> <path style="opacity:0.2;fill:#FFFFFF;enable-background:new ;" d="M480.623,330.029c-6.094-29.764-14.656-57.23-25.453-81.668 c-13.624-30.874-30.873-56.99-51.278-77.623c-38.546-38.982-88.325-58.748-147.933-58.748c-3.593,0-7.14,0.078-10.671,0.219 c54.905,2.234,101.043,21.898,137.276,58.529c20.391,20.632,37.656,46.749,51.28,77.623c10.796,24.438,19.357,51.904,25.451,81.668 c10.359,50.514,10.031,89.764,10.016,91.404l-0.109,10.547h21.327l0.125-10.547C490.669,419.793,490.981,380.543,480.623,330.029z" /> <g> <path style="fill:#E5E8EC;" d="M511.98,389.324c0-5.906-4.781-10.688-10.671-10.688H10.671C4.78,378.636,0,383.417,0,389.324 v85.311c0,5.906,4.781,10.688,10.671,10.688h490.638c5.89,0,10.671-4.781,10.671-10.688V389.324z"/> <path style="fill:#E5E8EC;" d="M309.285,79.991c0,29.452-23.873,53.334-53.326,53.334c-29.452,0-53.326-23.882-53.326-53.334 s23.874-53.334,53.326-53.334C285.412,26.657,309.285,50.539,309.285,79.991z"/> </g> <g> <path style="fill:#CBD0D8;" d="M85.324,431.979c-5.89,0-10.656,4.781-10.656,10.654v42h21.327v-42 C95.996,436.76,91.215,431.979,85.324,431.979z"/> <path style="fill:#CBD0D8;" d="M170.665,431.979c-5.89,0-10.671,4.781-10.671,10.654v42h21.328v-42 C181.321,436.76,176.555,431.979,170.665,431.979z"/> <path style="fill:#CBD0D8;" d="M255.99,431.979c-5.89,0-10.671,4.781-10.671,10.654v42h21.343v-42 C266.662,436.76,261.881,431.979,255.99,431.979z"/> <path style="fill:#CBD0D8;" d="M341.315,431.979c-5.891,0-10.656,4.781-10.656,10.654v42h21.328v-42 C351.987,436.76,347.206,431.979,341.315,431.979z"/> <path style="fill:#CBD0D8;" d="M426.656,431.979c-5.89,0-10.671,4.781-10.671,10.654v42h21.327v-42 C437.312,436.76,432.547,431.979,426.656,431.979z"/> </g>`,
            viewBox: '0 0 511.98 511.98'
        }
    };
    function getAsset(name) {
        return EMBEDDED_ASSETS[name] || null;
    }

    class SVGBuilder {
        constructor(width, height, random) {
            this.elements = [];
            this.defs = [];
            this.gradientCounter = 0;
            this.width = width;
            this.height = height;
            this.random = random;
        }
        addElement(element) {
            this.elements.push(element);
        }
        circle(cx, cy, r, fill, stroke, strokeWidth) {
            const strokeAttr = stroke ? `stroke="${stroke}" stroke-width="${strokeWidth || 1}"` : '';
            this.addElement(`<circle cx="${cx}" cy="${cy}" r="${r}" fill="${fill}" ${strokeAttr} />`);
        }
        ellipse(cx, cy, rx, ry, fill, stroke, strokeWidth) {
            const strokeAttr = stroke ? `stroke="${stroke}" stroke-width="${strokeWidth || 1}"` : '';
            this.addElement(`<ellipse cx="${cx}" cy="${cy}" rx="${rx}" ry="${ry}" fill="${fill}" ${strokeAttr} />`);
        }
        path(d, fill, stroke, strokeWidth) {
            const strokeAttr = stroke ? `stroke="${stroke}" stroke-width="${strokeWidth || 1}"` : '';
            this.addElement(`<path d="${d}" fill="${fill}" ${strokeAttr} />`);
        }
        polygon(points, fill, stroke, strokeWidth) {
            const strokeAttr = stroke ? `stroke="${stroke}" stroke-width="${strokeWidth || 1}"` : '';
            this.addElement(`<polygon points="${points}" fill="${fill}" ${strokeAttr} />`);
        }
        rect(x, y, width, height, fill, stroke, strokeWidth) {
            const strokeAttr = stroke ? `stroke="${stroke}" stroke-width="${strokeWidth || 1}"` : '';
            this.addElement(`<rect x="${x}" y="${y}" width="${width}" height="${height}" fill="${fill}" ${strokeAttr} />`);
        }
        text(x, y, text, fontSize, fill, fontFamily) {
            const font = fontFamily || 'Arial';
            this.addElement(`<text x="${x}" y="${y}" font-family="${font}" font-size="${fontSize}" fill="${fill}">${text}</text>`);
        }
        group(elements, transform) {
            const transformAttr = transform ? `transform="${transform}"` : '';
            this.addElement(`<g ${transformAttr}>${elements.join('')}</g>`);
        }
        build() {
            const defsSection = this.defs.length > 0 ? `<defs>${this.defs.join('')}</defs>` : '';
            return `<svg width="${this.width}" height="${this.height}" viewBox="0 0 ${this.width} ${this.height}" xmlns="http://www.w3.org/2000/svg">
      ${defsSection}
      ${this.elements.join('\n')}
    </svg>`;
        }
        addGradient(color1, color2) {
            const gradientId = `gradient${this.gradientCounter++}`;
            this.defs.push(`
      <linearGradient id="${gradientId}" x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" style="stop-color:${color1};stop-opacity:1" />
        <stop offset="100%" style="stop-color:${color2};stop-opacity:1" />
      </linearGradient>
    `);
            return gradientId;
        }
        addRadialGradient(color1, color2) {
            const gradientId = `radialGradient${this.gradientCounter++}`;
            this.defs.push(`
      <radialGradient id="${gradientId}" cx="30%" cy="30%" r="70%">
        <stop offset="0%" style="stop-color:${color1};stop-opacity:1" />
        <stop offset="100%" style="stop-color:${color2};stop-opacity:1" />
      </radialGradient>
    `);
            return gradientId;
        }
        /**
         * Embed a browser-compatible SVG asset from the original high-quality assets
         */
        embedSVGAsset(assetName, x, y, size, scale = 1) {
            try {
                const asset = getAsset(assetName);
                if (!asset) {
                    console.warn(`Asset '${assetName}' not found in embedded assets`);
                    return;
                }
                // Parse viewBox to get original dimensions
                const viewBoxValues = asset.viewBox.split(/\s+/).map(Number);
                let sourceWidth = 24;
                let sourceHeight = 24;
                if (viewBoxValues.length === 4) {
                    const [minX, minY, width, height] = viewBoxValues;
                    sourceWidth = width;
                    sourceHeight = height;
                }
                // Calculate scaling factors
                const scaledSize = size * scale;
                const baseScale = scaledSize / Math.max(sourceWidth, sourceHeight);
                // Calculate center positioning
                const offsetX = x - (sourceWidth * baseScale) / 2;
                const offsetY = y - (sourceHeight * baseScale) / 2;
                // Create a group with transformation and the original viewBox
                const transform = `translate(${offsetX}, ${offsetY}) scale(${baseScale})`;
                this.addElement(`<g transform="${transform}">
        <svg viewBox="${asset.viewBox}" width="${sourceWidth}" height="${sourceHeight}" style="overflow: visible;">
          ${asset.content}
        </svg>
      </g>`);
            }
            catch (error) {
                console.error(`Error embedding SVG asset '${assetName}':`, error);
            }
        }
        /**
         * Sanitize SVG content by removing problematic namespace elements
         */
        sanitizeSVGContent(svgContent) {
            return svgContent
                // Remove sodipodi:namedview elements completely
                .replace(/<sodipodi:namedview[^>]*>.*?<\/sodipodi:namedview>/gs, '')
                .replace(/<sodipodi:namedview[^>]*\/>/gs, '')
                // Remove other problematic elements
                .replace(/<metadata[^>]*>.*?<\/metadata>/gs, '')
                // Clean up any remaining namespace references that might cause issues
                .replace(/\s+xmlns:sodipodi="[^"]*"/g, '')
                .replace(/\s+xmlns:inkscape="[^"]*"/g, '')
                .replace(/\s+sodipodi:[^=]*="[^"]*"/g, '')
                .replace(/\s+inkscape:[^=]*="[^"]*"/g, '')
                // Clean up excessive whitespace
                .replace(/\s+/g, ' ')
                .trim();
        }
        // Helper methods for common cat shapes
        drawCatHead(x, y, size, color) {
            // Add gradient definition for more depth
            const gradientId = this.addGradient(color, this.darkenColor(color, 15));
            // Main head shape - horizontal oval for a more cat-like appearance
            this.ellipse(x, y, size * 1.1, size * 0.8, `url(#${gradientId})`, this.darkenColor(color, 30), 2);
            // Cat ears - properly positioned triangular ears with angled base
            const earWidth = size * 0.45; // Increased from 0.35
            const earHeight = size * 0.55; // Increased from 0.45
            const earOffset = size * 0.55; // Distance from center to ear base
            // Calculate ear base points that touch the head circle
            const leftEarBaseX = x - earOffset;
            const rightEarBaseX = x + earOffset;
            const earBaseY = y - size * 0.65; // Position on the head circle
            // Calculate 30-degree angle for ear base (30 degrees = π/6 radians)
            const angleRad = (30 * Math.PI) / 180;
            const baseAngleOffset = earWidth * 0.5 * Math.sin(angleRad);
            const baseVerticalOffset = earWidth * 0.5 * Math.cos(angleRad) * 0.3; // Adjust vertical offset
            // Left ear - triangle with angled base following head contour
            this.path(`M ${leftEarBaseX - earWidth / 2 + baseAngleOffset} ${earBaseY + baseVerticalOffset} 
               L ${leftEarBaseX - earWidth * 0.1} ${earBaseY - earHeight} 
               L ${leftEarBaseX + earWidth / 2 - baseAngleOffset} ${earBaseY - baseVerticalOffset} 
               Z`, `url(#${gradientId})`, this.darkenColor(color, 30), 2);
            // Right ear - triangle with angled base following head contour
            this.path(`M ${rightEarBaseX - earWidth / 2 + baseAngleOffset} ${earBaseY - baseVerticalOffset} 
               L ${rightEarBaseX + earWidth * 0.1} ${earBaseY - earHeight} 
               L ${rightEarBaseX + earWidth / 2 - baseAngleOffset} ${earBaseY + baseVerticalOffset} 
               Z`, `url(#${gradientId})`, this.darkenColor(color, 30), 2);
            // Inner ears - smaller pink triangles with same angled base
            const innerEarWidth = earWidth * 0.5;
            const innerEarHeight = earHeight * 0.6;
            const innerBaseAngleOffset = innerEarWidth * 0.5 * Math.sin(angleRad);
            const innerBaseVerticalOffset = innerEarWidth * 0.5 * Math.cos(angleRad) * 0.3;
            this.path(`M ${leftEarBaseX - innerEarWidth / 2 + innerBaseAngleOffset} ${earBaseY - innerEarHeight * 0.2 + innerBaseVerticalOffset} 
               L ${leftEarBaseX - innerEarWidth * 0.1} ${earBaseY - innerEarHeight} 
               L ${leftEarBaseX + innerEarWidth / 2 - innerBaseAngleOffset} ${earBaseY - innerEarHeight * 0.2 - innerBaseVerticalOffset} 
               Z`, '#FFB6C1');
            this.path(`M ${rightEarBaseX - innerEarWidth / 2 + innerBaseAngleOffset} ${earBaseY - innerEarHeight * 0.2 - innerBaseVerticalOffset} 
               L ${rightEarBaseX + innerEarWidth * 0.1} ${earBaseY - innerEarHeight} 
               L ${rightEarBaseX + innerEarWidth / 2 - innerBaseAngleOffset} ${earBaseY - innerEarHeight * 0.2 + innerBaseVerticalOffset} 
               Z`, '#FFB6C1');
        }
        drawCatEyes(x, y, eyeShape, size) {
            const eyeY = y - size * 0.1; // Slightly lower position
            const eyeDistance = size * 0.32;
            const eyeSize = size * 0.22; // Larger eyes like the reference
            // Eye whites - larger and more expressive
            this.ellipse(x - eyeDistance, eyeY, eyeSize * 1.4, eyeSize * 1.6, '#FFFFFF', this.darkenColor('#FFFFFF', 10), 1);
            this.ellipse(x + eyeDistance, eyeY, eyeSize * 1.4, eyeSize * 1.6, '#FFFFFF', this.darkenColor('#FFFFFF', 10), 1);
            // Eye pupils based on shape - larger for more kawaii look
            switch (eyeShape) {
                case 'round':
                    this.circle(x - eyeDistance, eyeY, eyeSize * 0.8, '#000');
                    this.circle(x + eyeDistance, eyeY, eyeSize * 0.8, '#000');
                    break;
                case 'almond':
                    this.ellipse(x - eyeDistance, eyeY, eyeSize * 0.9, eyeSize * 0.7, '#000');
                    this.ellipse(x + eyeDistance, eyeY, eyeSize * 0.9, eyeSize * 0.7, '#000');
                    break;
                case 'wide':
                    this.ellipse(x - eyeDistance, eyeY, eyeSize * 1.1, eyeSize * 0.9, '#000');
                    this.ellipse(x + eyeDistance, eyeY, eyeSize * 1.1, eyeSize * 0.9, '#000');
                    break;
                case 'sleepy':
                    this.path(`M ${x - eyeDistance - eyeSize} ${eyeY} 
                   Q ${x - eyeDistance} ${eyeY - eyeSize * 0.3} 
                   ${x - eyeDistance + eyeSize} ${eyeY}`, 'none', '#000', 3);
                    this.path(`M ${x + eyeDistance - eyeSize} ${eyeY} 
                   Q ${x + eyeDistance} ${eyeY - eyeSize * 0.3} 
                   ${x + eyeDistance + eyeSize} ${eyeY}`, 'none', '#000', 3);
                    break;
                default:
                    this.ellipse(x - eyeDistance, eyeY, eyeSize * 0.7, eyeSize * 0.9, '#000');
                    this.ellipse(x + eyeDistance, eyeY, eyeSize * 0.7, eyeSize * 0.9, '#000');
            }
            // Add eye highlights - multiple for more life
            if (eyeShape !== 'sleepy') {
                this.circle(x - eyeDistance + eyeSize * 0.2, eyeY - eyeSize * 0.3, eyeSize * 0.3, '#FFFFFF');
                this.circle(x + eyeDistance + eyeSize * 0.2, eyeY - eyeSize * 0.3, eyeSize * 0.3, '#FFFFFF');
                this.circle(x - eyeDistance + eyeSize * 0.4, eyeY - eyeSize * 0.1, eyeSize * 0.12, '#FFFFFF');
                this.circle(x + eyeDistance + eyeSize * 0.4, eyeY - eyeSize * 0.1, eyeSize * 0.12, '#FFFFFF');
            }
        }
        drawCatMouth(x, y, mouthType, size) {
            const mouthY = y + size * 0.5; // Move mouth much lower for better spacing from eyes
            const mouthSize = size * 0.25;
            // Add cute nose first - moved much lower for better spacing from eyes
            this.ellipse(x, y + size * 0.35, size * 0.06, size * 0.05, '#FFB6C1');
            // Add nose line - also moved lower
            this.path(`M ${x} ${y + size * 0.4} L ${x} ${y + size * 0.48}`, 'none', this.darkenColor('#FFB6C1', 40), 2);
            switch (mouthType) {
                case 'smile':
                    this.path(`M ${x - mouthSize} ${mouthY} 
                   Q ${x} ${mouthY + mouthSize * 0.6} 
                   ${x + mouthSize} ${mouthY}`, 'none', '#000', 3);
                    break;
                case 'frown':
                    this.path(`M ${x - mouthSize} ${mouthY + mouthSize * 0.4} 
                   Q ${x} ${mouthY - mouthSize * 0.2} 
                   ${x + mouthSize} ${mouthY + mouthSize * 0.4}`, 'none', '#000', 3);
                    break;
                case 'open':
                    this.ellipse(x, mouthY + mouthSize * 0.3, mouthSize * 0.4, mouthSize * 0.3, '#000');
                    // Add little teeth
                    this.rect(x - mouthSize * 0.1, mouthY + mouthSize * 0.15, mouthSize * 0.05, mouthSize * 0.1, '#FFFFFF');
                    this.rect(x + mouthSize * 0.05, mouthY + mouthSize * 0.15, mouthSize * 0.05, mouthSize * 0.1, '#FFFFFF');
                    break;
                case 'tongue':
                    this.ellipse(x, mouthY + mouthSize * 0.1, mouthSize * 0.3, mouthSize * 0.15, '#000');
                    this.ellipse(x, mouthY + mouthSize * 0.4, mouthSize * 0.25, mouthSize * 0.45, '#FF69B4');
                    break;
                case 'cute':
                    // Small 'w' shape mouth
                    this.path(`M ${x - mouthSize * 0.3} ${mouthY} 
                   Q ${x - mouthSize * 0.1} ${mouthY + mouthSize * 0.2} 
                   ${x} ${mouthY}
                   Q ${x + mouthSize * 0.1} ${mouthY + mouthSize * 0.2} 
                   ${x + mouthSize * 0.3} ${mouthY}`, 'none', '#000', 2);
                    break;
                default:
                    this.ellipse(x, mouthY, mouthSize * 0.15, mouthSize * 0.08, '#000');
            }
        }
        drawFurPattern(x, y, size, pattern, baseColor) {
            switch (pattern) {
                case 'stripes':
                    this.drawStripes(x, y, size, baseColor);
                    break;
                case 'spots':
                    this.drawSpots(x, y, size, baseColor);
                    break;
                case 'calico':
                    this.drawCalico(x, y, size, baseColor);
                    break;
                case 'tuxedo':
                    this.drawTuxedo(x, y, size, baseColor);
                    break;
                // Add more patterns as needed
            }
        }
        drawStripes(x, y, size, baseColor) {
            const stripeColor = this.darkenColor(baseColor, 30);
            // Draw curved stripes that follow the cat's body contour
            const stripeCount = 4;
            for (let i = 0; i < stripeCount; i++) {
                const stripeY = y - size * 0.6 + (i * size * 0.3);
                const stripeWidth = size * 0.6 + (i * size * 0.1); // Varying width
                // Draw curved stripe using path instead of rectangle
                this.path(`M ${x - stripeWidth * 0.5} ${stripeY} 
                 Q ${x} ${stripeY - size * 0.05} 
                 ${x + stripeWidth * 0.5} ${stripeY}`, 'none', stripeColor, size * 0.08);
            }
        }
        drawSpots(x, y, size, baseColor) {
            const spotColor = this.darkenColor(baseColor, 30);
            const spotCount = this.random.randomInt(3, 8);
            for (let i = 0; i < spotCount; i++) {
                const spotX = x + this.random.randomFloat(-size * 0.6, size * 0.6);
                const spotY = y + this.random.randomFloat(-size * 0.6, size * 0.6);
                const spotSize = this.random.randomFloat(size * 0.1, size * 0.2);
                this.circle(spotX, spotY, spotSize, spotColor);
            }
        }
        drawCalico(x, y, size, baseColor) {
            // Add orange and black patches
            this.circle(x - size * 0.3, y - size * 0.2, size * 0.3, '#FF6B35');
            this.circle(x + size * 0.4, y + size * 0.1, size * 0.25, '#2C3E50');
            this.circle(x - size * 0.1, y + size * 0.3, size * 0.2, '#FF6B35');
        }
        drawTuxedo(x, y, size, baseColor) {
            // White chest/belly area
            this.ellipse(x, y + size * 0.2, size * 0.4, size * 0.6, '#FFFFFF');
            // White paws
            this.circle(x - size * 0.6, y + size * 0.8, size * 0.15, '#FFFFFF');
            this.circle(x + size * 0.6, y + size * 0.8, size * 0.15, '#FFFFFF');
        }
        // Draw whiskers with more realistic curves
        drawWhiskers(x, y, size) {
            const whiskerY = y + size * 0.5; // Move whiskers much lower to align with mouth area
            // Left whiskers - starting more to the side and extending further outward
            this.path(`M ${x - size * 0.5} ${whiskerY - size * 0.05} 
               Q ${x - size * 0.8} ${whiskerY - size * 0.1} 
               ${x - size * 1.0} ${whiskerY - size * 0.08}`, 'none', '#000', 2);
            this.path(`M ${x - size * 0.5} ${whiskerY} 
               Q ${x - size * 0.8} ${whiskerY - size * 0.02} 
               ${x - size * 1.0} ${whiskerY}`, 'none', '#000', 2);
            this.path(`M ${x - size * 0.5} ${whiskerY + size * 0.05} 
               Q ${x - size * 0.8} ${whiskerY + size * 0.1} 
               ${x - size * 1.0} ${whiskerY + size * 0.08}`, 'none', '#000', 2);
            // Right whiskers - starting more to the side and extending further outward
            this.path(`M ${x + size * 0.5} ${whiskerY - size * 0.05} 
               Q ${x + size * 0.8} ${whiskerY - size * 0.1} 
               ${x + size * 1.0} ${whiskerY - size * 0.08}`, 'none', '#000', 2);
            this.path(`M ${x + size * 0.5} ${whiskerY} 
               Q ${x + size * 0.8} ${whiskerY - size * 0.02} 
               ${x + size * 1.0} ${whiskerY}`, 'none', '#000', 2);
            this.path(`M ${x + size * 0.5} ${whiskerY + size * 0.05} 
               Q ${x + size * 0.8} ${whiskerY + size * 0.1} 
               ${x + size * 1.0} ${whiskerY + size * 0.08}`, 'none', '#000', 2);
        }
        // Draw cute cheek blush
        drawCheekBlush(x, y, size) {
            // Make blush more prominent and positioned lower for better spacing
            const cheekSize = size * 0.16;
            const cheekOffset = size * 0.45;
            const cheekY = y + size * 0.5; // Move to same level as whiskers
            // Use a slightly more vibrant pink for better visibility
            const blushColor = '#FFB6C1';
            this.ellipse(x - cheekOffset, cheekY, cheekSize, cheekSize * 0.6, blushColor, 'none', 0);
            this.ellipse(x + cheekOffset, cheekY, cheekSize, cheekSize * 0.6, blushColor, 'none', 0);
        }
        // Draw modern cat body with better proportions
        drawCatBody(x, y, size, color) {
            const gradientId = this.addRadialGradient(color, this.darkenColor(color, 20));
            // Main body - more elongated and cat-like
            this.ellipse(x, y + size * 0.8, size * 0.7, size * 0.9, `url(#${gradientId})`, this.darkenColor(color, 30), 2);
            // Chest area - lighter
            this.ellipse(x, y + size * 0.6, size * 0.5, size * 0.4, this.lightenColor(color, 10));
            // Note: Legs are now drawn separately at the end of rendering
        }
        drawCatLegs(x, y, size, color) {
            const legSize = size * 0.15;
            const innerEarColor = '#FFB6C1'; // Same as inner ear color
            // Front legs/hands positioned in the middle of the body
            const frontLegY = y + size * 0.8; // Middle of the body
            const frontLeftX = x - size * 0.4;
            const frontRightX = x + size * 0.4;
            // Bottom legs (hind legs) at the bottom
            const bottomLegY = y + size * 1.5; // Bottom position
            const bottomLeftX = x - size * 0.25;
            const bottomRightX = x + size * 0.25;
            // Draw front legs/hands in the middle of the body
            this.circle(frontLeftX, frontLegY, legSize, color, this.darkenColor(color, 20), 2);
            this.circle(frontRightX, frontLegY, legSize, color, this.darkenColor(color, 20), 2);
            // Draw bottom legs (hind legs)
            this.circle(bottomLeftX, bottomLegY, legSize, color, this.darkenColor(color, 20), 2);
            this.circle(bottomRightX, bottomLegY, legSize, color, this.darkenColor(color, 20), 2);
            // Draw footprints (paw pads) on each leg
            const pawSize = legSize * 0.4;
            // Front paws (hands)
            this.drawPawPrint(frontLeftX, frontLegY, pawSize, innerEarColor);
            this.drawPawPrint(frontRightX, frontLegY, pawSize, innerEarColor);
            // Bottom paws (feet)
            this.drawPawPrint(bottomLeftX, bottomLegY, pawSize, innerEarColor);
            this.drawPawPrint(bottomRightX, bottomLegY, pawSize, innerEarColor);
        }
        drawPawPrint(x, y, size, color) {
            // Main paw pad (larger ellipse) - 2x bigger, filling most of the leg circle
            this.ellipse(x, y + size * 0.1, size * 1.8, size * 1.4, color);
            // Toe pads - 2x larger ellipses positioned around the main pad
            this.ellipse(x - size * 0.7, y - size * 0.4, size * 0.8, size * 1.0, color);
            this.ellipse(x, y - size * 0.7, size * 0.8, size * 1.0, color);
            this.ellipse(x + size * 0.7, y - size * 0.4, size * 0.8, size * 1.0, color);
        }
        // Enhanced accessory drawing
        drawAccessory(x, y, size, accessoryType) {
            switch (accessoryType) {
                case 'bow-tie':
                case 'bowtie':
                    this.drawBowTie(x, y, size);
                    break;
                case 'hat':
                    this.drawHat(x, y, size);
                    break;
                case 'glasses':
                    this.drawGlasses(x, y, size);
                    break;
                case 'crown':
                    this.drawCrown(x, y, size);
                    break;
                case '1st-place-medal':
                    this.draw1stPlaceMedal(x, y, size);
                    break;
                case 'adhesive-bandage':
                    this.drawAdhesiveBandage(x, y, size);
                    break;
                case 'flower':
                    this.drawFlower(x, y, size);
                    break;
                case 'scarf':
                    this.drawScarf(x, y, size);
                    break;
                case 'necklace':
                    this.drawNecklace(x, y, size);
                    break;
                case 'ribbon':
                    this.drawRibbon(x, y, size);
                    break;
                case 'mask':
                    this.drawMask(x, y, size);
                    break;
            }
        }
        drawBowTie(x, y, size) {
            // Use external SVG asset for bow-tie - goes on neck, same position as scarf
            const bowY = y + size * 0.75; // Position on the neck/chest area, same as scarf
            const bowX = x;
            const bowScale = 2.0; // Larger scale for better visibility
            this.embedSVGAsset('bow-tie', bowX, bowY, size * 0.5, bowScale);
        }
        drawHat(x, y, size) {
            // Use the external SVG asset for the hat - goes on top of head
            // Position at ear tip level - ears are at y - size * 0.65 and extend up by size * 0.45
            // So ear tips are at y - size * 1.1, hat should be positioned there
            const hatScale = 1.2; // Slightly larger scale to be more visible
            const hatY = y - size * 1.15;
            const hatX = x;
            this.embedSVGAsset('hat', hatX, hatY, size * 0.8, hatScale);
        }
        drawCrown(x, y, size) {
            // Use external SVG asset for crown - goes on top of head, same as hat
            const crownScale = 1.2; // Reduced scale for better positioning
            const crownY = y - size * 1.15;
            const crownX = x;
            this.embedSVGAsset('crown', crownX, crownY, size * 0.8, crownScale);
        }
        drawGlasses(x, y, size) {
            // Use external SVG asset for glasses - goes on eyes
            const glassesScale = 3; // Scale for proper fit
            const glassesY = y - size * 0.1;
            const glassesX = x;
            this.embedSVGAsset('glasses', glassesX, glassesY, size * 0.5, glassesScale);
        }
        drawFlower(x, y, size) {
            const flowerX = x + size * 0.7;
            const flowerY = y - size * 0.5;
            const petalSize = size * 0.08;
            // Flower petals
            for (let i = 0; i < 6; i++) {
                const angle = (i * Math.PI * 2) / 6;
                const petalX = flowerX + Math.cos(angle) * petalSize;
                const petalY = flowerY + Math.sin(angle) * petalSize;
                this.circle(petalX, petalY, petalSize * 0.7, '#FF69B4');
            }
            // Flower center
            this.circle(flowerX, flowerY, petalSize * 0.4, '#FFD700');
        }
        drawScarf(x, y, size) {
            const scarfScale = 2; // Same scale as hat
            const scarfY = y + size * 1.25;
            const scarfX = x + size * 0.15;
            this.embedSVGAsset('scarf', scarfX, scarfY, size * 0.5, scarfScale);
        }
        drawNecklace(x, y, size) {
            const necklaceY = y + size * 1.05;
            const necklaceScale = 1;
            const necklaceX = x;
            this.embedSVGAsset('necklace', necklaceX, necklaceY, size * 0.5, necklaceScale);
        }
        drawRibbon(x, y, size) {
            const ribbonY = y + size * 1.1;
            const ribbonScale = 1;
            const ribbonX = x;
            this.embedSVGAsset('ribbon', ribbonX, ribbonY, size * 0.5, ribbonScale);
        }
        draw1stPlaceMedal(x, y, size) {
            const medalY = y + size * 1.11;
            const medalScale = 1;
            this.embedSVGAsset('1st-place-medal', x, medalY, size * 0.7, medalScale);
        }
        drawAdhesiveBandage(x, y, size) {
            // Use external SVG asset for adhesive bandage - goes on the side of one eye without touching it
            const bandageX = x - size * 0.6; // Position to the left side of face
            const bandageY = y - size * 0.5; // Position at eye level but to the side
            const bandageScale = 1; // Smaller scale so it doesn't interfere with eye
            this.embedSVGAsset('adhesive-bandage', bandageX, bandageY, size * 0.3, bandageScale);
        }
        drawMask(x, y, size) {
            // Position mask to cover the cat's face area (same as head)
            // The cat head is centered at (x, y) with size * 1.1 width and size * 0.8 height
            const maskX = x; // Center on the cat's face
            const maskY = y; // Same vertical position as the head center
            const maskScale = 2.45; // Scale to match cat head size (head is size * 1.1 wide)
            this.embedSVGAsset('mask', maskX, maskY, size, maskScale);
        }
        lightenColor(color, amount) {
            const hex = color.replace('#', '');
            const r = Math.min(255, parseInt(hex.substr(0, 2), 16) + amount);
            const g = Math.min(255, parseInt(hex.substr(2, 2), 16) + amount);
            const b = Math.min(255, parseInt(hex.substr(4, 2), 16) + amount);
            return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
        }
        darkenColor(color, amount) {
            const hex = color.replace('#', '');
            const r = Math.max(0, parseInt(hex.substr(0, 2), 16) - amount);
            const g = Math.max(0, parseInt(hex.substr(2, 2), 16) - amount);
            const b = Math.max(0, parseInt(hex.substr(4, 2), 16) - amount);
            return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
        }
        darkenColorPublic(color, amount) {
            return this.darkenColor(color, amount);
        }
    }

    class CatGenerator {
        constructor(options = {}) {
            this.traits = { ...DEFAULT_CAT_TRAITS, ...options.customTraits };
            this.width = options.width || 400;
            this.height = options.height || 500; // Increased from 400 to 500 to accommodate hats and accessories
        }
        /**
         * Generate a cat from a seed
         */
        generateCat(seed) {
            const random = new SeededRandom(seed);
            const attributes = this.generateAttributes(random);
            const svgData = this.renderCat(attributes, random);
            return {
                id: this.generateId(seed),
                seed,
                attributes,
                svgData,
                traits: this.calculateTraitRarities(attributes),
            };
        }
        /**
         * Generate multiple cats from seeds
         */
        generateCats(seeds) {
            return seeds.map(seed => this.generateCat(seed));
        }
        /**
         * Generate a random cat with a random seed
         */
        generateRandomCat() {
            const seed = Math.random().toString(36).substring(2, 15);
            return this.generateCat(seed);
        }
        /**
         * Generate attributes based on seed
         */
        generateAttributes(random) {
            const attributes = {
                color: this.selectTraitByRarity(random, 'colors'),
                furPattern: this.selectTraitByRarity(random, 'furPatterns'),
                eyeShape: this.selectTraitByRarity(random, 'eyeShapes'),
                mouth: this.selectTraitByRarity(random, 'mouths'),
                accessory: this.selectTraitByRarity(random, 'accessories'),
            };
            return attributes;
        }
        /**
         * Select a trait based on rarity weights
         */
        selectTraitByRarity(random, traitType) {
            const rarityRoll = random.random();
            let cumulativeWeight = 0;
            const rarityOrder = ['mythical', 'legendary', 'rare', 'uncommon', 'common'];
            for (const rarity of rarityOrder) {
                cumulativeWeight += RARITY_WEIGHTS[rarity];
                if (rarityRoll <= cumulativeWeight) {
                    const traitsOfRarity = TRAIT_RARITIES[traitType][rarity];
                    if (traitsOfRarity.length > 0) {
                        return random.randomChoice(traitsOfRarity);
                    }
                }
            }
            // Fallback to common traits
            return random.randomChoice(this.traits[traitType]);
        }
        /**
         * Render the cat as SVG
         */
        renderCat(attributes, random) {
            const svg = new SVGBuilder(this.width, this.height, random);
            // REMOVED: Background - making it transparent
            // const bgGradient = svg.addRadialGradient('#F0F8FF', this.darkenColor('#F0F8FF', 10));
            // svg.rect(0, 0, this.width, this.height, `url(#${bgGradient})`);
            // REMOVED: Add background footprints for texture - transparent background
            // this.addBackgroundFootprints(svg, random);
            // Cat body positioning
            const centerX = this.width / 2;
            const centerY = this.height / 2;
            const catSize = Math.min(this.width, this.height) * 0.3;
            // Draw tail first so it appears behind the body
            this.drawTail(svg, centerX, centerY, catSize, attributes.color);
            // Draw enhanced cat body
            svg.drawCatBody(centerX, centerY, catSize, attributes.color);
            // Apply fur pattern
            svg.drawFurPattern(centerX, centerY, catSize, attributes.furPattern, attributes.color);
            // Draw cat head
            svg.drawCatHead(centerX, centerY - catSize * 0.5, catSize, attributes.color);
            // Draw eyes
            svg.drawCatEyes(centerX, centerY - catSize * 0.5, attributes.eyeShape, catSize);
            // Draw mouth
            svg.drawCatMouth(centerX, centerY - catSize * 0.5, attributes.mouth, catSize);
            // Draw cheek blush for extra cuteness - more frequent for kawaii style
            if (random.random() < 0.7) { // 70% chance for blush to match cute reference
                svg.drawCheekBlush(centerX, centerY - catSize * 0.5, catSize);
            }
            // Draw whiskers
            svg.drawWhiskers(centerX, centerY - catSize * 0.5, catSize);
            // Draw legs last so they appear on top of everything else
            svg.drawCatLegs(centerX, centerY, catSize, attributes.color);
            // Draw ALL accessories LAST so they appear in front of everything
            svg.drawAccessory(centerX, centerY - catSize * 0.5, catSize, attributes.accessory);
            return svg.build();
        }
        /**
         * Helper method to darken a color
         */
        darkenColor(color, amount) {
            const hex = color.replace('#', '');
            const r = Math.max(0, parseInt(hex.substr(0, 2), 16) - amount);
            const g = Math.max(0, parseInt(hex.substr(2, 2), 16) - amount);
            const b = Math.max(0, parseInt(hex.substr(4, 2), 16) - amount);
            return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
        }
        /**
         * Add decorative background footprints
         */
        addBackgroundFootprints(svg, random) {
            const footprintCount = 3;
            for (let i = 0; i < footprintCount; i++) {
                const x = random.randomFloat(50, this.width - 50);
                const y = random.randomFloat(50, this.height - 50);
                const size = random.randomFloat(8, 15);
                random.randomFloat(0.1, 0.3);
                // Create a simple footprint shape
                const footprintPath = `M ${x} ${y + size * 0.8} 
                      C ${x - size * 0.6} ${y + size * 0.4} 
                        ${x - size * 0.8} ${y} 
                        ${x - size * 0.2} ${y - size * 0.4}`;
                svg.path(footprintPath, 'none', this.darkenColor('#F0F8FF', 20), size * 2.2);
                svg.circle(x, y - size * 0.4, size * 0.11, this.darkenColor('#F0F8FF', 20));
            }
        }
        drawTail(svg, x, y, size, color) {
            const tailStartX = x - size * 0.5;
            const tailStartY = y + size * 0.6;
            const tailEndX = x - size * 1.5;
            const tailEndY = y + size * 0.3;
            // Create a natural spline curve for the tail with multiple control points
            // This creates an S-shaped curve that looks more like a real cat tail
            const control1X = x - size * 0.7;
            const control1Y = y + size * 0.8;
            const control2X = x - size * 1.0;
            const control2Y = y + size * 0.4;
            const control3X = x - size * 1.4;
            const control3Y = y + size * 0.6;
            // Enhanced natural tail with spline curve using multiple Bézier segments
            const tailPath = `M ${tailStartX} ${tailStartY} 
                      C ${control1X} ${control1Y} 
                        ${control2X} ${control2Y} 
                        ${x - size * 1.2} ${y + size * 0.5}
                      S ${control3X} ${control3Y} 
                        ${tailEndX} ${tailEndY}`;
            const gradientId = svg.addGradient(color, svg.darkenColorPublic(color, 20));
            svg.path(tailPath, 'none', `url(#${gradientId})`, size * 0.22);
            svg.path(tailPath, 'none', svg.darkenColorPublic(color, 30), 2);
            // Rounded tail end
            svg.circle(tailEndX, tailEndY, size * 0.11, `url(#${gradientId})`, svg.darkenColorPublic(color, 30), 2);
        }
        /**
         * Calculate trait rarities for the generated cat
         */
        calculateTraitRarities(attributes) {
            const rarities = {};
            // Calculate rarity for each trait
            rarities.color = this.getTraitRarity(attributes.color, 'colors');
            rarities.furPattern = this.getTraitRarity(attributes.furPattern, 'furPatterns');
            rarities.eyeShape = this.getTraitRarity(attributes.eyeShape, 'eyeShapes');
            rarities.mouth = this.getTraitRarity(attributes.mouth, 'mouths');
            rarities.accessory = this.getTraitRarity(attributes.accessory, 'accessories');
            return rarities;
        }
        getTraitRarity(trait, traitType) {
            for (const [rarity, traits] of Object.entries(TRAIT_RARITIES[traitType])) {
                if (traits.includes(trait)) {
                    return rarity;
                }
            }
            return 'common';
        }
        /**
         * Generate a unique ID for the cat
         */
        generateId(seed) {
            return `cat_${seed.substring(0, 8)}_${Date.now()}`;
        }
        /**
         * Helper method to determine if an accessory is a neck accessory
         */
        isNeckAccessory(accessory) {
            const neckAccessories = [
                'bow-tie', 'bowtie', 'scarf', 'necklace', 'ribbon', '1st-place-medal'
            ];
            return neckAccessories.includes(accessory);
        }
        /**
         * Helper method to determine if an accessory is a head/neck accessory (has SVG asset)
         */
        isHeadOrNeckAccessory(accessory) {
            const headOrNeckAccessories = [
                'hat', 'crown', 'bow-tie', 'bowtie', '1st-place-medal', 'scarf',
                'glasses', 'adhesive-bandage'
            ];
            return headOrNeckAccessories.includes(accessory);
        }
        /**
         * Generate a cat that is guaranteed to have at least one head or neck accessory
         */
        generateCatWithAccessory(seed, accessory) {
            if (accessory) {
                // Generate cat with specific accessory
                const random = new SeededRandom(seed);
                const attributes = this.generateAttributes(random);
                // Override the accessory with the specified one
                attributes.accessory = accessory;
                const svgData = this.renderCat(attributes, random);
                return {
                    id: this.generateId(seed),
                    seed,
                    attributes,
                    svgData,
                    traits: this.calculateTraitRarities(attributes),
                };
            }
            else {
                // Generate cat with guaranteed head/neck accessory
                let attempts = 0;
                let cat = this.generateCat(seed);
                while (!this.isHeadOrNeckAccessory(cat.attributes.accessory) && attempts < 10) {
                    attempts++;
                    cat = this.generateCat(seed + '-attempt-' + attempts);
                }
                return cat;
            }
        }
    }

    exports.CatGenerator = CatGenerator;
    exports.DEFAULT_CAT_TRAITS = DEFAULT_CAT_TRAITS;
    exports.RARITY_WEIGHTS = RARITY_WEIGHTS;
    exports.SVGBuilder = SVGBuilder;
    exports.SeededRandom = SeededRandom;
    exports.TRAIT_RARITIES = TRAIT_RARITIES;
    exports.default = CatGenerator;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=index.umd.js.map
